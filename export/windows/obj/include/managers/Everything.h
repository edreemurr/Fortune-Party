// Generated by Haxe 4.3.1
#ifndef INCLUDED_managers_Everything
#define INCLUDED_managers_Everything

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedContainer)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(managers,Controls)
HX_DECLARE_CLASS1(managers,Everything)

namespace managers{


class HXCPP_CLASS_ATTRIBUTES Everything_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef Everything_obj OBJ_;
		Everything_obj();

	public:
		enum { _hx_ClassId = 0x624c1279 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="managers.Everything")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"managers.Everything"); }
		static ::hx::ObjectPtr< Everything_obj > __new();
		static ::hx::ObjectPtr< Everything_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Everything_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Everything",93,ce,86,95); }

		static void __boot();
		static int cycle;
		static int players;
		static int cpus;
		static ::Array< int > coins;
		static ::Array< int > starPieces;
		static  ::managers::Everything getState();
		static ::Dynamic getState_dyn();

		static  ::haxe::ds::StringMap getVariables();
		static ::Dynamic getVariables_dyn();

		 ::haxe::ds::StringMap variables;
		virtual void create();

		virtual void update(Float elapsed);

		 ::managers::Controls get_controls();
		::Dynamic get_controls_dyn();

};

} // end namespace managers

#endif /* INCLUDED_managers_Everything */ 
