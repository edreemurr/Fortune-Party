// Generated by Haxe 4.3.1
#ifndef INCLUDED_managers_SaveData
#define INCLUDED_managers_SaveData

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(managers,GameSettings)
HX_DECLARE_CLASS1(managers,SaveData)

namespace managers{


class HXCPP_CLASS_ATTRIBUTES SaveData_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef SaveData_obj OBJ_;
		SaveData_obj();

	public:
		enum { _hx_ClassId = 0x03f30a8d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="managers.SaveData")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"managers.SaveData"); }

		inline static ::hx::ObjectPtr< SaveData_obj > __new() {
			::hx::ObjectPtr< SaveData_obj > __this = new SaveData_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< SaveData_obj > __alloc(::hx::Ctx *_hx_ctx) {
			SaveData_obj *__this = (SaveData_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SaveData_obj), false, "managers.SaveData"));
			*(void **)__this = SaveData_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~SaveData_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("SaveData",27,ac,ce,cf); }

		static void __boot();
		static  ::managers::GameSettings save;
		static  ::managers::GameSettings defaultSave;
		static  ::haxe::ds::StringMap keyboardDefault;
		static  ::haxe::ds::StringMap gamepadDefault;
		static  ::haxe::ds::StringMap keyboardButtons;
		static  ::haxe::ds::StringMap gamepadButtons;
		static void resetButtons( ::Dynamic controller);
		static ::Dynamic resetButtons_dyn();

		static void loadDefaultButtons();
		static ::Dynamic loadDefaultButtons_dyn();

		static void saveSettings();
		static ::Dynamic saveSettings_dyn();

		static void loadSettings();
		static ::Dynamic loadSettings_dyn();

};

} // end namespace managers

#endif /* INCLUDED_managers_SaveData */ 
