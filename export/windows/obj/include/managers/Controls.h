// Generated by Haxe 4.3.1
#ifndef INCLUDED_managers_Controls
#define INCLUDED_managers_Controls

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(managers,Controls)

namespace managers{


class HXCPP_CLASS_ATTRIBUTES Controls_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Controls_obj OBJ_;
		Controls_obj();

	public:
		enum { _hx_ClassId = 0x4592a0fc };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="managers.Controls")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"managers.Controls"); }
		static ::hx::ObjectPtr< Controls_obj > __new();
		static ::hx::ObjectPtr< Controls_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Controls_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Controls",96,42,6e,11); }

		static  ::managers::Controls instance;
		 ::haxe::ds::StringMap keyboard;
		 ::haxe::ds::StringMap gamepad;
		bool get_UP_P();
		::Dynamic get_UP_P_dyn();

		bool get_DOWN_P();
		::Dynamic get_DOWN_P_dyn();

		bool get_LEFT_P();
		::Dynamic get_LEFT_P_dyn();

		bool get_RIGHT_P();
		::Dynamic get_RIGHT_P_dyn();

		bool get_UP();
		::Dynamic get_UP_dyn();

		bool get_DOWN();
		::Dynamic get_DOWN_dyn();

		bool get_LEFT();
		::Dynamic get_LEFT_dyn();

		bool get_RIGHT();
		::Dynamic get_RIGHT_dyn();

		bool get_UP_R();
		::Dynamic get_UP_R_dyn();

		bool get_DOWN_R();
		::Dynamic get_DOWN_R_dyn();

		bool get_LEFT_R();
		::Dynamic get_LEFT_R_dyn();

		bool get_RIGHT_R();
		::Dynamic get_RIGHT_R_dyn();

		bool get_ENTER();
		::Dynamic get_ENTER_dyn();

		bool get_BACK();
		::Dynamic get_BACK_dyn();

		bool get_PAUSE();
		::Dynamic get_PAUSE_dyn();

		bool justPressed(::String button);
		::Dynamic justPressed_dyn();

		bool pressed(::String button);
		::Dynamic pressed_dyn();

		bool released(::String button);
		::Dynamic released_dyn();

		bool gamepadJustPressed(::Array< int > buttons);
		::Dynamic gamepadJustPressed_dyn();

		bool gamepadPressed(::Array< int > buttons);
		::Dynamic gamepadPressed_dyn();

		bool gamepadReleased(::Array< int > buttons);
		::Dynamic gamepadReleased_dyn();

};

} // end namespace managers

#endif /* INCLUDED_managers_Controls */ 
