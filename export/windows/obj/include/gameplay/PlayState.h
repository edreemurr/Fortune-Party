// Generated by Haxe 4.3.1
#ifndef INCLUDED_gameplay_PlayState
#define INCLUDED_gameplay_PlayState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_managers_Everything
#include <managers/Everything.h>
#endif
HX_DECLARE_CLASS1(assets,Character)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedContainer)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(gameplay,PlayState)
HX_DECLARE_CLASS1(managers,Everything)

namespace gameplay{


class HXCPP_CLASS_ATTRIBUTES PlayState_obj : public  ::managers::Everything_obj
{
	public:
		typedef  ::managers::Everything_obj super;
		typedef PlayState_obj OBJ_;
		PlayState_obj();

	public:
		enum { _hx_ClassId = 0x54ce45d3 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="gameplay.PlayState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"gameplay.PlayState"); }
		static ::hx::ObjectPtr< PlayState_obj > __new();
		static ::hx::ObjectPtr< PlayState_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PlayState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PlayState",5d,83,c2,46); }

		 ::assets::Character player1;
		 ::assets::Character player2;
		 ::assets::Character player3;
		 ::assets::Character player4;
		::Array< ::Dynamic> players;
		::Array< ::Dynamic> turnOrder;
		int activePlayer;
		int dieRoll;
		void create();

		void update(Float elapsed);

		int rollDice();
		::Dynamic rollDice_dyn();

		void playerMove( ::Dynamic num);
		::Dynamic playerMove_dyn();

};

} // end namespace gameplay

#endif /* INCLUDED_gameplay_PlayState */ 
