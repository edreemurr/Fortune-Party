// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_managers_GameSettings
#include <managers/GameSettings.h>
#endif
#ifndef INCLUDED_managers_SaveData
#include <managers/SaveData.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_40a421a6e0014b6f_45_resetButtons,"managers.SaveData","resetButtons",0xf7c553d1,"managers.SaveData.resetButtons","managers/Settings.hx",45,0xd64e7c32)
HX_LOCAL_STACK_FRAME(_hx_pos_40a421a6e0014b6f_58_loadDefaultButtons,"managers.SaveData","loadDefaultButtons",0x413acd25,"managers.SaveData.loadDefaultButtons","managers/Settings.hx",58,0xd64e7c32)
HX_LOCAL_STACK_FRAME(_hx_pos_40a421a6e0014b6f_64_saveSettings,"managers.SaveData","saveSettings",0x593784df,"managers.SaveData.saveSettings","managers/Settings.hx",64,0xd64e7c32)
HX_LOCAL_STACK_FRAME(_hx_pos_40a421a6e0014b6f_78_loadSettings,"managers.SaveData","loadSettings",0x001824c8,"managers.SaveData.loadSettings","managers/Settings.hx",78,0xd64e7c32)
HX_LOCAL_STACK_FRAME(_hx_pos_40a421a6e0014b6f_16_boot,"managers.SaveData","boot",0x597908d1,"managers.SaveData.boot","managers/Settings.hx",16,0xd64e7c32)
HX_LOCAL_STACK_FRAME(_hx_pos_40a421a6e0014b6f_17_boot,"managers.SaveData","boot",0x597908d1,"managers.SaveData.boot","managers/Settings.hx",17,0xd64e7c32)
HX_LOCAL_STACK_FRAME(_hx_pos_40a421a6e0014b6f_19_boot,"managers.SaveData","boot",0x597908d1,"managers.SaveData.boot","managers/Settings.hx",19,0xd64e7c32)
HX_LOCAL_STACK_FRAME(_hx_pos_40a421a6e0014b6f_20_boot,"managers.SaveData","boot",0x597908d1,"managers.SaveData.boot","managers/Settings.hx",20,0xd64e7c32)
HX_LOCAL_STACK_FRAME(_hx_pos_40a421a6e0014b6f_22_boot,"managers.SaveData","boot",0x597908d1,"managers.SaveData.boot","managers/Settings.hx",22,0xd64e7c32)
static const int _hx_array_data_7f83202f_15[] = {
	(int)87,
};
static const int _hx_array_data_7f83202f_16[] = {
	(int)83,
};
static const int _hx_array_data_7f83202f_17[] = {
	(int)65,
};
static const int _hx_array_data_7f83202f_18[] = {
	(int)68,
};
static const int _hx_array_data_7f83202f_19[] = {
	(int)32,
};
static const int _hx_array_data_7f83202f_20[] = {
	(int)8,
};
static const int _hx_array_data_7f83202f_21[] = {
	(int)27,
};
HX_LOCAL_STACK_FRAME(_hx_pos_40a421a6e0014b6f_33_boot,"managers.SaveData","boot",0x597908d1,"managers.SaveData.boot","managers/Settings.hx",33,0xd64e7c32)
static const int _hx_array_data_7f83202f_24[] = {
	(int)11,
};
static const int _hx_array_data_7f83202f_25[] = {
	(int)12,
};
static const int _hx_array_data_7f83202f_26[] = {
	(int)13,
};
static const int _hx_array_data_7f83202f_27[] = {
	(int)14,
};
static const int _hx_array_data_7f83202f_28[] = {
	(int)0,
};
static const int _hx_array_data_7f83202f_29[] = {
	(int)1,
};
static const int _hx_array_data_7f83202f_30[] = {
	(int)7,
};
namespace managers{

void SaveData_obj::__construct() { }

Dynamic SaveData_obj::__CreateEmpty() { return new SaveData_obj; }

void *SaveData_obj::_hx_vtable = 0;

Dynamic SaveData_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SaveData_obj > _hx_result = new SaveData_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SaveData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x03f30a8d;
}

 ::managers::GameSettings SaveData_obj::save;

 ::managers::GameSettings SaveData_obj::defaultSave;

 ::haxe::ds::StringMap SaveData_obj::keyboardDefault;

 ::haxe::ds::StringMap SaveData_obj::gamepadDefault;

 ::haxe::ds::StringMap SaveData_obj::keyboardButtons;

 ::haxe::ds::StringMap SaveData_obj::gamepadButtons;

void SaveData_obj::resetButtons( ::Dynamic controller){
            	HX_STACKFRAME(&_hx_pos_40a421a6e0014b6f_45_resetButtons)
HXLINE(  46)		if (::hx::IsNotEq( controller,true )) {
HXLINE(  47)			 ::Dynamic button = ::managers::SaveData_obj::keyboardButtons->keys();
HXDLIN(  47)			while(( (bool)(button->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  47)				::String button1 = ( (::String)(button->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  48)				if (::managers::SaveData_obj::keyboardDefault->exists(button1)) {
HXLINE(  49)					::Dynamic this1 = ::managers::SaveData_obj::keyboardButtons;
HXDLIN(  49)					( ( ::haxe::ds::StringMap)(this1) )->set(button1,( (::Array< int >)(::managers::SaveData_obj::keyboardDefault->get(button1)) )->copy());
            				}
            			}
            		}
HXLINE(  51)		if (::hx::IsNotEq( controller,false )) {
HXLINE(  52)			 ::Dynamic button2 = ::managers::SaveData_obj::gamepadButtons->keys();
HXDLIN(  52)			while(( (bool)(button2->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  52)				::String button3 = ( (::String)(button2->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  53)				if (::managers::SaveData_obj::gamepadDefault->exists(button3)) {
HXLINE(  54)					::Dynamic this2 = ::managers::SaveData_obj::gamepadButtons;
HXDLIN(  54)					( ( ::haxe::ds::StringMap)(this2) )->set(button3,( (::Array< int >)(::managers::SaveData_obj::gamepadDefault->get(button3)) )->copy());
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SaveData_obj,resetButtons,(void))

void SaveData_obj::loadDefaultButtons(){
            	HX_STACKFRAME(&_hx_pos_40a421a6e0014b6f_58_loadDefaultButtons)
HXLINE(  59)		::managers::SaveData_obj::keyboardDefault = ::managers::SaveData_obj::keyboardButtons->copy();
HXLINE(  60)		::managers::SaveData_obj::gamepadDefault = ::managers::SaveData_obj::gamepadButtons->copy();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SaveData_obj,loadDefaultButtons,(void))

void SaveData_obj::saveSettings(){
            	HX_GC_STACKFRAME(&_hx_pos_40a421a6e0014b6f_64_saveSettings)
HXLINE(  65)		{
HXLINE(  65)			int _g = 0;
HXDLIN(  65)			::Array< ::String > _g1 = ::Reflect_obj::fields(::managers::SaveData_obj::save);
HXDLIN(  65)			while((_g < _g1->length)){
HXLINE(  65)				::String button = _g1->__get(_g);
HXDLIN(  65)				_g = (_g + 1);
HXLINE(  66)				 ::Dynamic _hx_tmp = ::flixel::FlxG_obj::save->data;
HXDLIN(  66)				::Reflect_obj::setField(_hx_tmp,button,::Reflect_obj::field(::managers::SaveData_obj::save,button));
            			}
            		}
HXLINE(  68)		::flixel::FlxG_obj::save->flush(null());
HXLINE(  70)		 ::flixel::util::FlxSave saveControls =  ::flixel::util::FlxSave_obj::__alloc( HX_CTX );
HXLINE(  71)		::String company = ::openfl::Lib_obj::get_current()->stage->application->meta->get_string(HX_("company",3d,15,69,83));
HXDLIN(  71)		::String file = ::openfl::Lib_obj::get_current()->stage->application->meta->get_string(HX_("file",7c,ce,bb,43));
HXDLIN(  71)		saveControls->bind(HX_("controls",76,86,bc,37),(((HX_("",00,00,00,00) + company) + HX_("/",2f,00,00,00)) + file),null());
HXLINE(  72)		saveControls->data->__SetField(HX_("keyboard",a7,bc,29,68),::managers::SaveData_obj::keyboardButtons,::hx::paccDynamic);
HXLINE(  73)		saveControls->data->__SetField(HX_("gamepad",a1,e0,85,89),::managers::SaveData_obj::gamepadButtons,::hx::paccDynamic);
HXLINE(  74)		saveControls->flush(null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SaveData_obj,saveSettings,(void))

void SaveData_obj::loadSettings(){
            	HX_GC_STACKFRAME(&_hx_pos_40a421a6e0014b6f_78_loadSettings)
HXLINE(  79)		{
HXLINE(  79)			int _g = 0;
HXDLIN(  79)			::Array< ::String > _g1 = ::Reflect_obj::fields(::managers::SaveData_obj::save);
HXDLIN(  79)			while((_g < _g1->length)){
HXLINE(  79)				::String button = _g1->__get(_g);
HXDLIN(  79)				_g = (_g + 1);
HXLINE(  80)				if (::Reflect_obj::hasField(::flixel::FlxG_obj::save->data,button)) {
HXLINE(  81)					 ::managers::GameSettings _hx_tmp = ::managers::SaveData_obj::save;
HXDLIN(  81)					::Reflect_obj::setField(_hx_tmp,button,::Reflect_obj::field(::flixel::FlxG_obj::save->data,button));
            				}
            			}
            		}
HXLINE(  83)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("volume",da,29,53,5f),::hx::paccDynamic) )) {
HXLINE(  84)			::flixel::FlxG_obj::sound->set_volume(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("volume",da,29,53,5f),::hx::paccDynamic)) ));
            		}
HXLINE(  85)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("muted",6b,8f,5b,10),::hx::paccDynamic) )) {
HXLINE(  86)			::flixel::FlxG_obj::sound->muted = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("muted",6b,8f,5b,10),::hx::paccDynamic)) );
            		}
HXLINE(  88)		 ::flixel::util::FlxSave saveData =  ::flixel::util::FlxSave_obj::__alloc( HX_CTX );
HXLINE(  89)		::String company = ::openfl::Lib_obj::get_current()->stage->application->meta->get_string(HX_("company",3d,15,69,83));
HXDLIN(  89)		::String file = ::openfl::Lib_obj::get_current()->stage->application->meta->get_string(HX_("file",7c,ce,bb,43));
HXDLIN(  89)		saveData->bind(HX_("controls",76,86,bc,37),(((HX_("",00,00,00,00) + company) + HX_("/",2f,00,00,00)) + file),null());
HXLINE(  91)		if (::hx::IsNotNull( saveData )) {
HXLINE(  93)			if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("keyboard",a7,bc,29,68),::hx::paccDynamic) )) {
HXLINE(  95)				 ::haxe::ds::StringMap controls = ( ( ::haxe::ds::StringMap)(::flixel::FlxG_obj::save->data->__Field(HX_("keyboard",a7,bc,29,68),::hx::paccDynamic)) );
HXLINE(  97)				{
HXLINE(  97)					::Dynamic map = controls;
HXDLIN(  97)					::Dynamic _g_map = map;
HXDLIN(  97)					 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN(  97)					while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  97)						::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  97)						::Array< int > _g_value = ( (::Array< int >)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN(  97)						::String _g_key = key;
HXDLIN(  97)						::String input = _g_key;
HXDLIN(  97)						::Array< int > button1 = _g_value;
HXLINE(  98)						if (::managers::SaveData_obj::keyboardButtons->exists(input)) {
HXLINE(  99)							::managers::SaveData_obj::keyboardButtons->set(input,button1);
            						}
            					}
            				}
            			}
HXLINE( 102)			if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("gamepad",a1,e0,85,89),::hx::paccDynamic) )) {
HXLINE( 104)				 ::haxe::ds::StringMap controls1 = ( ( ::haxe::ds::StringMap)(::flixel::FlxG_obj::save->data->__Field(HX_("gamepad",a1,e0,85,89),::hx::paccDynamic)) );
HXLINE( 106)				{
HXLINE( 106)					::Dynamic map1 = controls1;
HXDLIN( 106)					::Dynamic _g_map1 = map1;
HXDLIN( 106)					 ::Dynamic _g_keys1 = ::haxe::IMap_obj::keys(map1);
HXDLIN( 106)					while(( (bool)(_g_keys1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 106)						::String key1 = ( (::String)(_g_keys1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 106)						::Array< int > _g_value1 = ( (::Array< int >)(::haxe::IMap_obj::get(_g_map1,key1)) );
HXDLIN( 106)						::String _g_key1 = key1;
HXDLIN( 106)						::String input1 = _g_key1;
HXDLIN( 106)						::Array< int > button2 = _g_value1;
HXLINE( 107)						if (::managers::SaveData_obj::gamepadButtons->exists(input1)) {
HXLINE( 108)							::managers::SaveData_obj::gamepadButtons->set(input1,button2);
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SaveData_obj,loadSettings,(void))


SaveData_obj::SaveData_obj()
{
}

bool SaveData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"save") ) { outValue = ( save ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"defaultSave") ) { outValue = ( defaultSave ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resetButtons") ) { outValue = resetButtons_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"saveSettings") ) { outValue = saveSettings_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadSettings") ) { outValue = loadSettings_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"gamepadDefault") ) { outValue = ( gamepadDefault ); return true; }
		if (HX_FIELD_EQ(inName,"gamepadButtons") ) { outValue = ( gamepadButtons ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"keyboardDefault") ) { outValue = ( keyboardDefault ); return true; }
		if (HX_FIELD_EQ(inName,"keyboardButtons") ) { outValue = ( keyboardButtons ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"loadDefaultButtons") ) { outValue = loadDefaultButtons_dyn(); return true; }
	}
	return false;
}

bool SaveData_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"save") ) { save=ioValue.Cast<  ::managers::GameSettings >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"defaultSave") ) { defaultSave=ioValue.Cast<  ::managers::GameSettings >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"gamepadDefault") ) { gamepadDefault=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"gamepadButtons") ) { gamepadButtons=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"keyboardDefault") ) { keyboardDefault=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"keyboardButtons") ) { keyboardButtons=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *SaveData_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo SaveData_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::managers::GameSettings */ ,(void *) &SaveData_obj::save,HX_("save",3d,8b,4d,4c)},
	{::hx::fsObject /*  ::managers::GameSettings */ ,(void *) &SaveData_obj::defaultSave,HX_("defaultSave",9e,84,0c,1e)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &SaveData_obj::keyboardDefault,HX_("keyboardDefault",da,36,c3,a3)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &SaveData_obj::gamepadDefault,HX_("gamepadDefault",20,e6,c4,66)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &SaveData_obj::keyboardButtons,HX_("keyboardButtons",5a,b0,74,d2)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &SaveData_obj::gamepadButtons,HX_("gamepadButtons",a0,5f,76,95)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void SaveData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SaveData_obj::save,"save");
	HX_MARK_MEMBER_NAME(SaveData_obj::defaultSave,"defaultSave");
	HX_MARK_MEMBER_NAME(SaveData_obj::keyboardDefault,"keyboardDefault");
	HX_MARK_MEMBER_NAME(SaveData_obj::gamepadDefault,"gamepadDefault");
	HX_MARK_MEMBER_NAME(SaveData_obj::keyboardButtons,"keyboardButtons");
	HX_MARK_MEMBER_NAME(SaveData_obj::gamepadButtons,"gamepadButtons");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SaveData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SaveData_obj::save,"save");
	HX_VISIT_MEMBER_NAME(SaveData_obj::defaultSave,"defaultSave");
	HX_VISIT_MEMBER_NAME(SaveData_obj::keyboardDefault,"keyboardDefault");
	HX_VISIT_MEMBER_NAME(SaveData_obj::gamepadDefault,"gamepadDefault");
	HX_VISIT_MEMBER_NAME(SaveData_obj::keyboardButtons,"keyboardButtons");
	HX_VISIT_MEMBER_NAME(SaveData_obj::gamepadButtons,"gamepadButtons");
};

#endif

::hx::Class SaveData_obj::__mClass;

static ::String SaveData_obj_sStaticFields[] = {
	HX_("save",3d,8b,4d,4c),
	HX_("defaultSave",9e,84,0c,1e),
	HX_("keyboardDefault",da,36,c3,a3),
	HX_("gamepadDefault",20,e6,c4,66),
	HX_("keyboardButtons",5a,b0,74,d2),
	HX_("gamepadButtons",a0,5f,76,95),
	HX_("resetButtons",32,98,53,3c),
	HX_("loadDefaultButtons",46,10,76,d9),
	HX_("saveSettings",40,c9,c5,9d),
	HX_("loadSettings",29,69,a6,44),
	::String(null())
};

void SaveData_obj::__register()
{
	SaveData_obj _hx_dummy;
	SaveData_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("managers.SaveData",2f,20,83,7f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SaveData_obj::__GetStatic;
	__mClass->mSetStaticField = &SaveData_obj::__SetStatic;
	__mClass->mMarkFunc = SaveData_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(SaveData_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< SaveData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SaveData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SaveData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SaveData_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SaveData_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_40a421a6e0014b6f_16_boot)
HXDLIN(  16)		save =  ::managers::GameSettings_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_40a421a6e0014b6f_17_boot)
HXDLIN(  17)		defaultSave =  ::managers::GameSettings_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_STACKFRAME(&_hx_pos_40a421a6e0014b6f_19_boot)
HXDLIN(  19)		keyboardDefault = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_40a421a6e0014b6f_20_boot)
HXDLIN(  20)		gamepadDefault = null();
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::haxe::ds::StringMap _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_40a421a6e0014b6f_22_boot)
HXDLIN(  22)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  22)			_g->set(HX_("up",5b,66,00,00),::Array_obj< int >::fromData( _hx_array_data_7f83202f_15,1));
HXDLIN(  22)			_g->set(HX_("down",62,f8,6d,42),::Array_obj< int >::fromData( _hx_array_data_7f83202f_16,1));
HXDLIN(  22)			_g->set(HX_("left",07,08,b0,47),::Array_obj< int >::fromData( _hx_array_data_7f83202f_17,1));
HXDLIN(  22)			_g->set(HX_("right",dc,0b,64,e9),::Array_obj< int >::fromData( _hx_array_data_7f83202f_18,1));
HXDLIN(  22)			_g->set(HX_("enter",18,6d,86,70),::Array_obj< int >::fromData( _hx_array_data_7f83202f_19,1));
HXDLIN(  22)			_g->set(HX_("back",27,da,10,41),::Array_obj< int >::fromData( _hx_array_data_7f83202f_20,1));
HXDLIN(  22)			_g->set(HX_("pause",f6,d6,57,bd),::Array_obj< int >::fromData( _hx_array_data_7f83202f_21,1));
HXDLIN(  22)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_40a421a6e0014b6f_22_boot)
HXDLIN(  22)		keyboardButtons = ( ( ::haxe::ds::StringMap)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::haxe::ds::StringMap _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_40a421a6e0014b6f_33_boot)
HXDLIN(  33)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  33)			_g->set(HX_("up",5b,66,00,00),::Array_obj< int >::fromData( _hx_array_data_7f83202f_24,1));
HXDLIN(  33)			_g->set(HX_("down",62,f8,6d,42),::Array_obj< int >::fromData( _hx_array_data_7f83202f_25,1));
HXDLIN(  33)			_g->set(HX_("left",07,08,b0,47),::Array_obj< int >::fromData( _hx_array_data_7f83202f_26,1));
HXDLIN(  33)			_g->set(HX_("right",dc,0b,64,e9),::Array_obj< int >::fromData( _hx_array_data_7f83202f_27,1));
HXDLIN(  33)			_g->set(HX_("enter",18,6d,86,70),::Array_obj< int >::fromData( _hx_array_data_7f83202f_28,1));
HXDLIN(  33)			_g->set(HX_("back",27,da,10,41),::Array_obj< int >::fromData( _hx_array_data_7f83202f_29,1));
HXDLIN(  33)			_g->set(HX_("pause",f6,d6,57,bd),::Array_obj< int >::fromData( _hx_array_data_7f83202f_30,1));
HXDLIN(  33)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_40a421a6e0014b6f_33_boot)
HXDLIN(  33)		gamepadButtons = ( ( ::haxe::ds::StringMap)( ::Dynamic(new _hx_Closure_0())()) );
            	}
}

} // end namespace managers
