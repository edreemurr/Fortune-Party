// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_managers_Controls
#include <managers/Controls.h>
#endif
#ifndef INCLUDED_managers_Everything
#include <managers/Everything.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ebdbb991ffbd3090_6_new,"managers.Everything","new",0x93d7df0d,"managers.Everything.new","managers/Everything.hx",6,0xecaad462)
HX_LOCAL_STACK_FRAME(_hx_pos_ebdbb991ffbd3090_23_create,"managers.Everything","create",0xa662026f,"managers.Everything.create","managers/Everything.hx",23,0xecaad462)
HX_LOCAL_STACK_FRAME(_hx_pos_ebdbb991ffbd3090_27_update,"managers.Everything","update",0xb158217c,"managers.Everything.update","managers/Everything.hx",27,0xecaad462)
HX_LOCAL_STACK_FRAME(_hx_pos_ebdbb991ffbd3090_78_get_controls,"managers.Everything","get_controls",0xcdb36e32,"managers.Everything.get_controls","managers/Everything.hx",78,0xecaad462)
HX_LOCAL_STACK_FRAME(_hx_pos_ebdbb991ffbd3090_72_getState,"managers.Everything","getState",0x3ca923ce,"managers.Everything.getState","managers/Everything.hx",72,0xecaad462)
HX_LOCAL_STACK_FRAME(_hx_pos_ebdbb991ffbd3090_75_getVariables,"managers.Everything","getVariables",0x7296b2f4,"managers.Everything.getVariables","managers/Everything.hx",75,0xecaad462)
HX_LOCAL_STACK_FRAME(_hx_pos_ebdbb991ffbd3090_8_boot,"managers.Everything","boot",0xc1244ce5,"managers.Everything.boot","managers/Everything.hx",8,0xecaad462)
HX_LOCAL_STACK_FRAME(_hx_pos_ebdbb991ffbd3090_10_boot,"managers.Everything","boot",0xc1244ce5,"managers.Everything.boot","managers/Everything.hx",10,0xecaad462)
HX_LOCAL_STACK_FRAME(_hx_pos_ebdbb991ffbd3090_11_boot,"managers.Everything","boot",0xc1244ce5,"managers.Everything.boot","managers/Everything.hx",11,0xecaad462)
HX_LOCAL_STACK_FRAME(_hx_pos_ebdbb991ffbd3090_13_boot,"managers.Everything","boot",0xc1244ce5,"managers.Everything.boot","managers/Everything.hx",13,0xecaad462)
HX_LOCAL_STACK_FRAME(_hx_pos_ebdbb991ffbd3090_14_boot,"managers.Everything","boot",0xc1244ce5,"managers.Everything.boot","managers/Everything.hx",14,0xecaad462)
namespace managers{

void Everything_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_ebdbb991ffbd3090_6_new)
HXLINE(  17)		this->variables =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(   6)		super::__construct();
            	}

Dynamic Everything_obj::__CreateEmpty() { return new Everything_obj; }

void *Everything_obj::_hx_vtable = 0;

Dynamic Everything_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Everything_obj > _hx_result = new Everything_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Everything_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x624c1279) {
			if (inClassId<=(int)0x563293a6) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x563293a6;
			} else {
				return inClassId==(int)0x624c1279;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void Everything_obj::create(){
            	HX_STACKFRAME(&_hx_pos_ebdbb991ffbd3090_23_create)
HXDLIN(  23)		this->super::create();
            	}


void Everything_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_ebdbb991ffbd3090_27_update)
HXLINE(  28)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data )) {
HXLINE(  29)			::flixel::FlxG_obj::save->data->__SetField(HX_("fullscreen",3b,3a,b4,f9),::flixel::FlxG_obj::get_fullscreen(),::hx::paccDynamic);
            		}
HXLINE(  31)		this->super::update(elapsed);
            	}


 ::managers::Controls Everything_obj::get_controls(){
            	HX_STACKFRAME(&_hx_pos_ebdbb991ffbd3090_78_get_controls)
HXDLIN(  78)		return ::managers::Controls_obj::instance;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Everything_obj,get_controls,return )

int Everything_obj::cycle;

int Everything_obj::players;

int Everything_obj::cpus;

::Array< int > Everything_obj::coins;

::Array< int > Everything_obj::starPieces;

 ::managers::Everything Everything_obj::getState(){
            	HX_STACKFRAME(&_hx_pos_ebdbb991ffbd3090_72_getState)
HXDLIN(  72)		return ::hx::TCast<  ::managers::Everything >::cast(::flixel::FlxG_obj::game->_state);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Everything_obj,getState,return )

 ::haxe::ds::StringMap Everything_obj::getVariables(){
            	HX_STACKFRAME(&_hx_pos_ebdbb991ffbd3090_75_getVariables)
HXDLIN(  75)		return ::managers::Everything_obj::getState()->variables;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Everything_obj,getVariables,return )


::hx::ObjectPtr< Everything_obj > Everything_obj::__new() {
	::hx::ObjectPtr< Everything_obj > __this = new Everything_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Everything_obj > Everything_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Everything_obj *__this = (Everything_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Everything_obj), true, "managers.Everything"));
	*(void **)__this = Everything_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Everything_obj::Everything_obj()
{
}

void Everything_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Everything);
	HX_MARK_MEMBER_NAME(variables,"variables");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Everything_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(variables,"variables");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Everything_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"controls") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_controls() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"variables") ) { return ::hx::Val( variables ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_controls") ) { return ::hx::Val( get_controls_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Everything_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"cpus") ) { outValue = ( cpus ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cycle") ) { outValue = ( cycle ); return true; }
		if (HX_FIELD_EQ(inName,"coins") ) { outValue = ( coins ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"players") ) { outValue = ( players ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getState") ) { outValue = getState_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"starPieces") ) { outValue = ( starPieces ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getVariables") ) { outValue = getVariables_dyn(); return true; }
	}
	return false;
}

::hx::Val Everything_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"variables") ) { variables=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Everything_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"cpus") ) { cpus=ioValue.Cast< int >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cycle") ) { cycle=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"coins") ) { coins=ioValue.Cast< ::Array< int > >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"players") ) { players=ioValue.Cast< int >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"starPieces") ) { starPieces=ioValue.Cast< ::Array< int > >(); return true; }
	}
	return false;
}

void Everything_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("controls",76,86,bc,37));
	outFields->push(HX_("variables",b7,e2,62,82));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Everything_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Everything_obj,variables),HX_("variables",b7,e2,62,82)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Everything_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Everything_obj::cycle,HX_("cycle",a6,bc,f1,50)},
	{::hx::fsInt,(void *) &Everything_obj::players,HX_("players",f2,09,15,8a)},
	{::hx::fsInt,(void *) &Everything_obj::cpus,HX_("cpus",4b,82,c5,41)},
	{::hx::fsObject /* ::Array< int > */ ,(void *) &Everything_obj::coins,HX_("coins",c2,29,5a,4a)},
	{::hx::fsObject /* ::Array< int > */ ,(void *) &Everything_obj::starPieces,HX_("starPieces",37,58,31,dc)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Everything_obj_sMemberFields[] = {
	HX_("variables",b7,e2,62,82),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("get_controls",7f,3a,d6,ec),
	::String(null()) };

static void Everything_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Everything_obj::cycle,"cycle");
	HX_MARK_MEMBER_NAME(Everything_obj::players,"players");
	HX_MARK_MEMBER_NAME(Everything_obj::cpus,"cpus");
	HX_MARK_MEMBER_NAME(Everything_obj::coins,"coins");
	HX_MARK_MEMBER_NAME(Everything_obj::starPieces,"starPieces");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Everything_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Everything_obj::cycle,"cycle");
	HX_VISIT_MEMBER_NAME(Everything_obj::players,"players");
	HX_VISIT_MEMBER_NAME(Everything_obj::cpus,"cpus");
	HX_VISIT_MEMBER_NAME(Everything_obj::coins,"coins");
	HX_VISIT_MEMBER_NAME(Everything_obj::starPieces,"starPieces");
};

#endif

::hx::Class Everything_obj::__mClass;

static ::String Everything_obj_sStaticFields[] = {
	HX_("cycle",a6,bc,f1,50),
	HX_("players",f2,09,15,8a),
	HX_("cpus",4b,82,c5,41),
	HX_("coins",c2,29,5a,4a),
	HX_("starPieces",37,58,31,dc),
	HX_("getState",9b,85,e2,e3),
	HX_("getVariables",41,7f,b9,91),
	::String(null())
};

void Everything_obj::__register()
{
	Everything_obj _hx_dummy;
	Everything_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("managers.Everything",9b,54,46,f2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Everything_obj::__GetStatic;
	__mClass->mSetStaticField = &Everything_obj::__SetStatic;
	__mClass->mMarkFunc = Everything_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Everything_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Everything_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Everything_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Everything_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Everything_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Everything_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Everything_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ebdbb991ffbd3090_8_boot)
HXDLIN(   8)		cycle = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ebdbb991ffbd3090_10_boot)
HXDLIN(  10)		players = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ebdbb991ffbd3090_11_boot)
HXDLIN(  11)		cpus = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ebdbb991ffbd3090_13_boot)
HXDLIN(  13)		coins = ::Array_obj< int >::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_ebdbb991ffbd3090_14_boot)
HXDLIN(  14)		starPieces = ::Array_obj< int >::__new(0);
            	}
}

} // end namespace managers
