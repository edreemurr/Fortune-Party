// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_managers_Controls
#include <managers/Controls.h>
#endif
#ifndef INCLUDED_managers_SaveData
#include <managers/SaveData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a2a72b0c80d449dd_13_new,"managers.Controls","new",0xffc0fe90,"managers.Controls.new","managers/Controls.hx",13,0x1745707f)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a72b0c80d449dd_28_get_UP_P,"managers.Controls","get_UP_P",0x49544985,"managers.Controls.get_UP_P","managers/Controls.hx",28,0x1745707f)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a72b0c80d449dd_29_get_DOWN_P,"managers.Controls","get_DOWN_P",0x195ad78c,"managers.Controls.get_DOWN_P","managers/Controls.hx",29,0x1745707f)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a72b0c80d449dd_30_get_LEFT_P,"managers.Controls","get_LEFT_P",0x7efbda71,"managers.Controls.get_LEFT_P","managers/Controls.hx",30,0x1745707f)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a72b0c80d449dd_31_get_RIGHT_P,"managers.Controls","get_RIGHT_P",0xbbc13c14,"managers.Controls.get_RIGHT_P","managers/Controls.hx",31,0x1745707f)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a72b0c80d449dd_38_get_UP,"managers.Controls","get_UP",0xcd6db174,"managers.Controls.get_UP","managers/Controls.hx",38,0x1745707f)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a72b0c80d449dd_39_get_DOWN,"managers.Controls","get_DOWN",0x3e16dfbb,"managers.Controls.get_DOWN","managers/Controls.hx",39,0x1745707f)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a72b0c80d449dd_40_get_LEFT,"managers.Controls","get_LEFT",0x4358ef60,"managers.Controls.get_LEFT","managers/Controls.hx",40,0x1745707f)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a72b0c80d449dd_41_get_RIGHT,"managers.Controls","get_RIGHT",0x21859243,"managers.Controls.get_RIGHT","managers/Controls.hx",41,0x1745707f)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a72b0c80d449dd_48_get_UP_R,"managers.Controls","get_UP_R",0x49544987,"managers.Controls.get_UP_R","managers/Controls.hx",48,0x1745707f)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a72b0c80d449dd_49_get_DOWN_R,"managers.Controls","get_DOWN_R",0x195ad78e,"managers.Controls.get_DOWN_R","managers/Controls.hx",49,0x1745707f)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a72b0c80d449dd_50_get_LEFT_R,"managers.Controls","get_LEFT_R",0x7efbda73,"managers.Controls.get_LEFT_R","managers/Controls.hx",50,0x1745707f)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a72b0c80d449dd_51_get_RIGHT_R,"managers.Controls","get_RIGHT_R",0xbbc13c16,"managers.Controls.get_RIGHT_R","managers/Controls.hx",51,0x1745707f)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a72b0c80d449dd_58_get_ENTER,"managers.Controls","get_ENTER",0xa8a7f37f,"managers.Controls.get_ENTER","managers/Controls.hx",58,0x1745707f)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a72b0c80d449dd_59_get_BACK,"managers.Controls","get_BACK",0x3cb9c180,"managers.Controls.get_BACK","managers/Controls.hx",59,0x1745707f)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a72b0c80d449dd_60_get_PAUSE,"managers.Controls","get_PAUSE",0xf5795d5d,"managers.Controls.get_PAUSE","managers/Controls.hx",60,0x1745707f)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a72b0c80d449dd_63_justPressed,"managers.Controls","justPressed",0x9535ec06,"managers.Controls.justPressed","managers/Controls.hx",63,0x1745707f)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a72b0c80d449dd_66_pressed,"managers.Controls","pressed",0x05bed8d2,"managers.Controls.pressed","managers/Controls.hx",66,0x1745707f)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a72b0c80d449dd_69_released,"managers.Controls","released",0x0814ec8d,"managers.Controls.released","managers/Controls.hx",69,0x1745707f)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a72b0c80d449dd_72_gamepadJustPressed,"managers.Controls","gamepadJustPressed",0x1e61fe85,"managers.Controls.gamepadJustPressed","managers/Controls.hx",72,0x1745707f)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a72b0c80d449dd_82_gamepadPressed,"managers.Controls","gamepadPressed",0xcc31ffd1,"managers.Controls.gamepadPressed","managers/Controls.hx",82,0x1745707f)
HX_LOCAL_STACK_FRAME(_hx_pos_a2a72b0c80d449dd_92_gamepadReleased,"managers.Controls","gamepadReleased",0xe663e4ae,"managers.Controls.gamepadReleased","managers/Controls.hx",92,0x1745707f)
namespace managers{

void Controls_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a2a72b0c80d449dd_13_new)
HXLINE(  14)		this->keyboard = ::managers::SaveData_obj::keyboardButtons;
HXLINE(  15)		this->gamepad = ::managers::SaveData_obj::gamepadButtons;
            	}

Dynamic Controls_obj::__CreateEmpty() { return new Controls_obj; }

void *Controls_obj::_hx_vtable = 0;

Dynamic Controls_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Controls_obj > _hx_result = new Controls_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Controls_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4592a0fc;
}

bool Controls_obj::get_UP_P(){
            	HX_STACKFRAME(&_hx_pos_a2a72b0c80d449dd_28_get_UP_P)
HXDLIN(  28)		return this->justPressed(HX_("up",5b,66,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_UP_P,return )

bool Controls_obj::get_DOWN_P(){
            	HX_STACKFRAME(&_hx_pos_a2a72b0c80d449dd_29_get_DOWN_P)
HXDLIN(  29)		return this->justPressed(HX_("down",62,f8,6d,42));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_DOWN_P,return )

bool Controls_obj::get_LEFT_P(){
            	HX_STACKFRAME(&_hx_pos_a2a72b0c80d449dd_30_get_LEFT_P)
HXDLIN(  30)		return this->justPressed(HX_("left",07,08,b0,47));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_LEFT_P,return )

bool Controls_obj::get_RIGHT_P(){
            	HX_STACKFRAME(&_hx_pos_a2a72b0c80d449dd_31_get_RIGHT_P)
HXDLIN(  31)		return this->justPressed(HX_("right",dc,0b,64,e9));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_RIGHT_P,return )

bool Controls_obj::get_UP(){
            	HX_STACKFRAME(&_hx_pos_a2a72b0c80d449dd_38_get_UP)
HXDLIN(  38)		return this->justPressed(HX_("up",5b,66,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_UP,return )

bool Controls_obj::get_DOWN(){
            	HX_STACKFRAME(&_hx_pos_a2a72b0c80d449dd_39_get_DOWN)
HXDLIN(  39)		return this->justPressed(HX_("down",62,f8,6d,42));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_DOWN,return )

bool Controls_obj::get_LEFT(){
            	HX_STACKFRAME(&_hx_pos_a2a72b0c80d449dd_40_get_LEFT)
HXDLIN(  40)		return this->justPressed(HX_("left",07,08,b0,47));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_LEFT,return )

bool Controls_obj::get_RIGHT(){
            	HX_STACKFRAME(&_hx_pos_a2a72b0c80d449dd_41_get_RIGHT)
HXDLIN(  41)		return this->justPressed(HX_("right",dc,0b,64,e9));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_RIGHT,return )

bool Controls_obj::get_UP_R(){
            	HX_STACKFRAME(&_hx_pos_a2a72b0c80d449dd_48_get_UP_R)
HXDLIN(  48)		return this->released(HX_("up",5b,66,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_UP_R,return )

bool Controls_obj::get_DOWN_R(){
            	HX_STACKFRAME(&_hx_pos_a2a72b0c80d449dd_49_get_DOWN_R)
HXDLIN(  49)		return this->released(HX_("down",62,f8,6d,42));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_DOWN_R,return )

bool Controls_obj::get_LEFT_R(){
            	HX_STACKFRAME(&_hx_pos_a2a72b0c80d449dd_50_get_LEFT_R)
HXDLIN(  50)		return this->released(HX_("left",07,08,b0,47));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_LEFT_R,return )

bool Controls_obj::get_RIGHT_R(){
            	HX_STACKFRAME(&_hx_pos_a2a72b0c80d449dd_51_get_RIGHT_R)
HXDLIN(  51)		return this->released(HX_("right",dc,0b,64,e9));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_RIGHT_R,return )

bool Controls_obj::get_ENTER(){
            	HX_STACKFRAME(&_hx_pos_a2a72b0c80d449dd_58_get_ENTER)
HXDLIN(  58)		return this->justPressed(HX_("enter",18,6d,86,70));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_ENTER,return )

bool Controls_obj::get_BACK(){
            	HX_STACKFRAME(&_hx_pos_a2a72b0c80d449dd_59_get_BACK)
HXDLIN(  59)		return this->justPressed(HX_("back",27,da,10,41));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_BACK,return )

bool Controls_obj::get_PAUSE(){
            	HX_STACKFRAME(&_hx_pos_a2a72b0c80d449dd_60_get_PAUSE)
HXDLIN(  60)		return this->justPressed(HX_("pause",f6,d6,57,bd));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_PAUSE,return )

bool Controls_obj::justPressed(::String button){
            	HX_STACKFRAME(&_hx_pos_a2a72b0c80d449dd_63_justPressed)
HXDLIN(  63)		 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN(  63)		if ((_this->checkKeyArrayState(( (::cpp::VirtualArray)(this->keyboard->get(button)) ),2) != true)) {
HXDLIN(  63)			return (this->gamepadJustPressed(( (::Array< int >)(this->gamepad->get(button)) )) == true);
            		}
            		else {
HXDLIN(  63)			return true;
            		}
HXDLIN(  63)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,justPressed,return )

bool Controls_obj::pressed(::String button){
            	HX_STACKFRAME(&_hx_pos_a2a72b0c80d449dd_66_pressed)
HXDLIN(  66)		 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN(  66)		if ((_this->checkKeyArrayState(( (::cpp::VirtualArray)(this->keyboard->get(button)) ),2) != true)) {
HXDLIN(  66)			return (this->gamepadPressed(( (::Array< int >)(this->gamepad->get(button)) )) == true);
            		}
            		else {
HXDLIN(  66)			return true;
            		}
HXDLIN(  66)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,pressed,return )

bool Controls_obj::released(::String button){
            	HX_STACKFRAME(&_hx_pos_a2a72b0c80d449dd_69_released)
HXDLIN(  69)		 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN(  69)		if ((_this->checkKeyArrayState(( (::cpp::VirtualArray)(this->keyboard->get(button)) ),-1) != true)) {
HXDLIN(  69)			return (this->gamepadReleased(( (::Array< int >)(this->gamepad->get(button)) )) == true);
            		}
            		else {
HXDLIN(  69)			return true;
            		}
HXDLIN(  69)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,released,return )

bool Controls_obj::gamepadJustPressed(::Array< int > buttons){
            	HX_STACKFRAME(&_hx_pos_a2a72b0c80d449dd_72_gamepadJustPressed)
HXLINE(  73)		if (::hx::IsNotNull( buttons )) {
HXLINE(  74)			int _g = 0;
HXDLIN(  74)			while((_g < buttons->length)){
HXLINE(  74)				int button = buttons->__get(_g);
HXDLIN(  74)				_g = (_g + 1);
HXLINE(  75)				if ((::flixel::FlxG_obj::gamepads->anyHasState(button,2) == true)) {
HXLINE(  76)					return true;
            				}
            			}
            		}
HXLINE(  78)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,gamepadJustPressed,return )

bool Controls_obj::gamepadPressed(::Array< int > buttons){
            	HX_STACKFRAME(&_hx_pos_a2a72b0c80d449dd_82_gamepadPressed)
HXLINE(  83)		if (::hx::IsNotNull( buttons )) {
HXLINE(  84)			int _g = 0;
HXDLIN(  84)			while((_g < buttons->length)){
HXLINE(  84)				int button = buttons->__get(_g);
HXDLIN(  84)				_g = (_g + 1);
HXLINE(  85)				if ((::flixel::FlxG_obj::gamepads->anyHasState(button,1) == true)) {
HXLINE(  86)					return true;
            				}
            			}
            		}
HXLINE(  88)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,gamepadPressed,return )

bool Controls_obj::gamepadReleased(::Array< int > buttons){
            	HX_STACKFRAME(&_hx_pos_a2a72b0c80d449dd_92_gamepadReleased)
HXLINE(  93)		if (::hx::IsNotNull( buttons )) {
HXLINE(  94)			int _g = 0;
HXDLIN(  94)			while((_g < buttons->length)){
HXLINE(  94)				int button = buttons->__get(_g);
HXDLIN(  94)				_g = (_g + 1);
HXLINE(  95)				if ((::flixel::FlxG_obj::gamepads->anyHasState(button,-1) == true)) {
HXLINE(  96)					return true;
            				}
            			}
            		}
HXLINE(  98)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,gamepadReleased,return )

 ::managers::Controls Controls_obj::instance;


::hx::ObjectPtr< Controls_obj > Controls_obj::__new() {
	::hx::ObjectPtr< Controls_obj > __this = new Controls_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Controls_obj > Controls_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Controls_obj *__this = (Controls_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Controls_obj), true, "managers.Controls"));
	*(void **)__this = Controls_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Controls_obj::Controls_obj()
{
}

void Controls_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Controls);
	HX_MARK_MEMBER_NAME(keyboard,"keyboard");
	HX_MARK_MEMBER_NAME(gamepad,"gamepad");
	HX_MARK_END_CLASS();
}

void Controls_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(keyboard,"keyboard");
	HX_VISIT_MEMBER_NAME(gamepad,"gamepad");
}

::hx::Val Controls_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"UP") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_UP() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"UP_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_UP_P() ); }
		if (HX_FIELD_EQ(inName,"DOWN") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_DOWN() ); }
		if (HX_FIELD_EQ(inName,"LEFT") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_LEFT() ); }
		if (HX_FIELD_EQ(inName,"UP_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_UP_R() ); }
		if (HX_FIELD_EQ(inName,"BACK") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_BACK() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"RIGHT") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_RIGHT() ); }
		if (HX_FIELD_EQ(inName,"ENTER") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_ENTER() ); }
		if (HX_FIELD_EQ(inName,"PAUSE") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_PAUSE() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"DOWN_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_DOWN_P() ); }
		if (HX_FIELD_EQ(inName,"LEFT_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_LEFT_P() ); }
		if (HX_FIELD_EQ(inName,"get_UP") ) { return ::hx::Val( get_UP_dyn() ); }
		if (HX_FIELD_EQ(inName,"DOWN_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_DOWN_R() ); }
		if (HX_FIELD_EQ(inName,"LEFT_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_LEFT_R() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gamepad") ) { return ::hx::Val( gamepad ); }
		if (HX_FIELD_EQ(inName,"RIGHT_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_RIGHT_P() ); }
		if (HX_FIELD_EQ(inName,"RIGHT_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_RIGHT_R() ); }
		if (HX_FIELD_EQ(inName,"pressed") ) { return ::hx::Val( pressed_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"keyboard") ) { return ::hx::Val( keyboard ); }
		if (HX_FIELD_EQ(inName,"get_UP_P") ) { return ::hx::Val( get_UP_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_DOWN") ) { return ::hx::Val( get_DOWN_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_LEFT") ) { return ::hx::Val( get_LEFT_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_UP_R") ) { return ::hx::Val( get_UP_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_BACK") ) { return ::hx::Val( get_BACK_dyn() ); }
		if (HX_FIELD_EQ(inName,"released") ) { return ::hx::Val( released_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_RIGHT") ) { return ::hx::Val( get_RIGHT_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_ENTER") ) { return ::hx::Val( get_ENTER_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_PAUSE") ) { return ::hx::Val( get_PAUSE_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_DOWN_P") ) { return ::hx::Val( get_DOWN_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_LEFT_P") ) { return ::hx::Val( get_LEFT_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_DOWN_R") ) { return ::hx::Val( get_DOWN_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_LEFT_R") ) { return ::hx::Val( get_LEFT_R_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_RIGHT_P") ) { return ::hx::Val( get_RIGHT_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_RIGHT_R") ) { return ::hx::Val( get_RIGHT_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"justPressed") ) { return ::hx::Val( justPressed_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"gamepadPressed") ) { return ::hx::Val( gamepadPressed_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"gamepadReleased") ) { return ::hx::Val( gamepadReleased_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"gamepadJustPressed") ) { return ::hx::Val( gamepadJustPressed_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Controls_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
	}
	return false;
}

::hx::Val Controls_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"gamepad") ) { gamepad=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"keyboard") ) { keyboard=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Controls_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::managers::Controls >(); return true; }
	}
	return false;
}

void Controls_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("keyboard",a7,bc,29,68));
	outFields->push(HX_("gamepad",a1,e0,85,89));
	outFields->push(HX_("UP_P",2c,2a,6c,38));
	outFields->push(HX_("DOWN_P",f3,6f,a9,e6));
	outFields->push(HX_("LEFT_P",d8,72,4a,4c));
	outFields->push(HX_("RIGHT_P",cd,fd,37,93));
	outFields->push(HX_("UP",5b,4a,00,00));
	outFields->push(HX_("DOWN",62,c0,2e,2d));
	outFields->push(HX_("LEFT",07,d0,70,32));
	outFields->push(HX_("RIGHT",bc,43,52,67));
	outFields->push(HX_("UP_R",2e,2a,6c,38));
	outFields->push(HX_("DOWN_R",f5,6f,a9,e6));
	outFields->push(HX_("LEFT_R",da,72,4a,4c));
	outFields->push(HX_("RIGHT_R",cf,fd,37,93));
	outFields->push(HX_("ENTER",f8,a4,74,ee));
	outFields->push(HX_("BACK",27,a2,d1,2b));
	outFields->push(HX_("PAUSE",d6,0e,46,3b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Controls_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Controls_obj,keyboard),HX_("keyboard",a7,bc,29,68)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Controls_obj,gamepad),HX_("gamepad",a1,e0,85,89)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Controls_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::managers::Controls */ ,(void *) &Controls_obj::instance,HX_("instance",95,1f,e1,59)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Controls_obj_sMemberFields[] = {
	HX_("keyboard",a7,bc,29,68),
	HX_("gamepad",a1,e0,85,89),
	HX_("get_UP_P",b5,e5,26,b8),
	HX_("get_DOWN_P",bc,df,30,d7),
	HX_("get_LEFT_P",a1,e2,d1,3c),
	HX_("get_RIGHT_P",e4,5d,32,19),
	HX_("get_UP",a4,e1,2f,a3),
	HX_("get_DOWN",eb,7b,e9,ac),
	HX_("get_LEFT",90,8b,2b,b2),
	HX_("get_RIGHT",13,a0,fb,aa),
	HX_("get_UP_R",b7,e5,26,b8),
	HX_("get_DOWN_R",be,df,30,d7),
	HX_("get_LEFT_R",a3,e2,d1,3c),
	HX_("get_RIGHT_R",e6,5d,32,19),
	HX_("get_ENTER",4f,01,1e,32),
	HX_("get_BACK",b0,5d,8c,ab),
	HX_("get_PAUSE",2d,6b,ef,7e),
	HX_("justPressed",d6,0d,a7,f2),
	HX_("pressed",a2,d2,e6,39),
	HX_("released",bd,88,e7,76),
	HX_("gamepadJustPressed",b5,b6,c3,ba),
	HX_("gamepadPressed",01,e0,e7,04),
	HX_("gamepadReleased",7e,2e,d2,4c),
	::String(null()) };

static void Controls_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Controls_obj::instance,"instance");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Controls_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Controls_obj::instance,"instance");
};

#endif

::hx::Class Controls_obj::__mClass;

static ::String Controls_obj_sStaticFields[] = {
	HX_("instance",95,1f,e1,59),
	::String(null())
};

void Controls_obj::__register()
{
	Controls_obj _hx_dummy;
	Controls_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("managers.Controls",9e,b6,22,c1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Controls_obj::__GetStatic;
	__mClass->mSetStaticField = &Controls_obj::__SetStatic;
	__mClass->mMarkFunc = Controls_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Controls_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Controls_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Controls_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Controls_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Controls_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Controls_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace managers
