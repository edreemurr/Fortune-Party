// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_assets_Character
#include <assets/Character.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_gameplay_PlayState
#include <gameplay/PlayState.h>
#endif
#ifndef INCLUDED_managers_Controls
#include <managers/Controls.h>
#endif
#ifndef INCLUDED_managers_Everything
#include <managers/Everything.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_72f6203685ccccf6_8_new,"gameplay.PlayState","new",0x071c9b47,"gameplay.PlayState.new","gameplay/PlayState.hx",8,0x7bbd278a)
HX_LOCAL_STACK_FRAME(_hx_pos_72f6203685ccccf6_23_create,"gameplay.PlayState","create",0x00112675,"gameplay.PlayState.create","gameplay/PlayState.hx",23,0x7bbd278a)
HX_LOCAL_STACK_FRAME(_hx_pos_72f6203685ccccf6_47_update,"gameplay.PlayState","update",0x0b074582,"gameplay.PlayState.update","gameplay/PlayState.hx",47,0x7bbd278a)
HX_LOCAL_STACK_FRAME(_hx_pos_72f6203685ccccf6_60_rollDice,"gameplay.PlayState","rollDice",0xe2e4c33d,"gameplay.PlayState.rollDice","gameplay/PlayState.hx",60,0x7bbd278a)
HX_LOCAL_STACK_FRAME(_hx_pos_72f6203685ccccf6_69_playerMove,"gameplay.PlayState","playerMove",0xf7ec2f0b,"gameplay.PlayState.playerMove","gameplay/PlayState.hx",69,0x7bbd278a)
namespace gameplay{

void PlayState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_72f6203685ccccf6_8_new)
HXLINE(  20)		this->dieRoll = 0;
HXLINE(  18)		this->activePlayer = 0;
HXLINE(  16)		this->turnOrder = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  15)		this->players = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(   8)		super::__construct();
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x624c1279) {
		if (inClassId<=(int)0x563293a6) {
			if (inClassId<=(int)0x54ce45d3) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x54ce45d3;
			} else {
				return inClassId==(int)0x563293a6;
			}
		} else {
			return inClassId==(int)0x624c1279;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_72f6203685ccccf6_23_create)
HXLINE(  27)		this->player1 =  ::assets::Character_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  28)		this->players->push(this->player1);
HXLINE(  29)		this->add(this->player1);
HXLINE(  31)		this->player2 =  ::assets::Character_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  32)		this->players->push(this->player2);
HXLINE(  33)		this->add(this->player2);
HXLINE(  35)		this->player3 =  ::assets::Character_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  36)		this->players->push(this->player3);
HXLINE(  37)		this->add(this->player3);
HXLINE(  39)		this->player4 =  ::assets::Character_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  40)		this->players->push(this->player4);
HXLINE(  41)		this->add(this->player4);
HXLINE(  43)		this->super::create();
            	}


void PlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_72f6203685ccccf6_47_update)
HXLINE(  48)		if (this->get_controls()->get_ENTER()) {
HXLINE(  49)			this->dieRoll = this->rollDice();
            		}
HXLINE(  51)		this->playerMove(null());
HXLINE(  53)		 ::gameplay::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  53)		_hx_tmp->activePlayer = (_hx_tmp->activePlayer + 1);
HXLINE(  54)		this->activePlayer = ::flixel::math::FlxMath_obj::wrap(this->activePlayer,0,(this->players->length - 1));
HXLINE(  56)		this->super::update(elapsed);
            	}


int PlayState_obj::rollDice(){
            	HX_STACKFRAME(&_hx_pos_72f6203685ccccf6_60_rollDice)
HXLINE(  61)		int num = ::flixel::FlxG_obj::random->_hx_int(1,6,null());
HXLINE(  63)		{
HXLINE(  63)			 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
HXDLIN(  63)			 ::Dynamic data = (((HX_("",00,00,00,00) + ::Std_obj::string(this->players->__get(this->activePlayer).StaticCast<  ::assets::Character >())) + HX_(" rolled ",64,df,70,83)) + num);
HXDLIN(  63)			_this->advanced(data,::flixel::_hx_system::debug::log::LogStyle_obj::NOTICE,null());
            		}
HXLINE(  65)		return num;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,rollDice,return )

void PlayState_obj::playerMove( ::Dynamic num){
            	HX_STACKFRAME(&_hx_pos_72f6203685ccccf6_69_playerMove)
HXLINE(  70)		 ::assets::Character fh = this->players->__get(this->activePlayer).StaticCast<  ::assets::Character >();
HXDLIN(  70)		fh->set_x((fh->x + (( (int)(num) ) * 10)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,playerMove,(void))


::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new() {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "gameplay.PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(player1,"player1");
	HX_MARK_MEMBER_NAME(player2,"player2");
	HX_MARK_MEMBER_NAME(player3,"player3");
	HX_MARK_MEMBER_NAME(player4,"player4");
	HX_MARK_MEMBER_NAME(players,"players");
	HX_MARK_MEMBER_NAME(turnOrder,"turnOrder");
	HX_MARK_MEMBER_NAME(activePlayer,"activePlayer");
	HX_MARK_MEMBER_NAME(dieRoll,"dieRoll");
	 ::managers::Everything_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(player1,"player1");
	HX_VISIT_MEMBER_NAME(player2,"player2");
	HX_VISIT_MEMBER_NAME(player3,"player3");
	HX_VISIT_MEMBER_NAME(player4,"player4");
	HX_VISIT_MEMBER_NAME(players,"players");
	HX_VISIT_MEMBER_NAME(turnOrder,"turnOrder");
	HX_VISIT_MEMBER_NAME(activePlayer,"activePlayer");
	HX_VISIT_MEMBER_NAME(dieRoll,"dieRoll");
	 ::managers::Everything_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"player1") ) { return ::hx::Val( player1 ); }
		if (HX_FIELD_EQ(inName,"player2") ) { return ::hx::Val( player2 ); }
		if (HX_FIELD_EQ(inName,"player3") ) { return ::hx::Val( player3 ); }
		if (HX_FIELD_EQ(inName,"player4") ) { return ::hx::Val( player4 ); }
		if (HX_FIELD_EQ(inName,"players") ) { return ::hx::Val( players ); }
		if (HX_FIELD_EQ(inName,"dieRoll") ) { return ::hx::Val( dieRoll ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rollDice") ) { return ::hx::Val( rollDice_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"turnOrder") ) { return ::hx::Val( turnOrder ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"playerMove") ) { return ::hx::Val( playerMove_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"activePlayer") ) { return ::hx::Val( activePlayer ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"player1") ) { player1=inValue.Cast<  ::assets::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"player2") ) { player2=inValue.Cast<  ::assets::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"player3") ) { player3=inValue.Cast<  ::assets::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"player4") ) { player4=inValue.Cast<  ::assets::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"players") ) { players=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dieRoll") ) { dieRoll=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"turnOrder") ) { turnOrder=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"activePlayer") ) { activePlayer=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("player1",b0,09,15,8a));
	outFields->push(HX_("player2",b1,09,15,8a));
	outFields->push(HX_("player3",b2,09,15,8a));
	outFields->push(HX_("player4",b3,09,15,8a));
	outFields->push(HX_("players",f2,09,15,8a));
	outFields->push(HX_("turnOrder",d1,af,90,01));
	outFields->push(HX_("activePlayer",c7,39,d4,97));
	outFields->push(HX_("dieRoll",dd,f4,db,97));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::assets::Character */ ,(int)offsetof(PlayState_obj,player1),HX_("player1",b0,09,15,8a)},
	{::hx::fsObject /*  ::assets::Character */ ,(int)offsetof(PlayState_obj,player2),HX_("player2",b1,09,15,8a)},
	{::hx::fsObject /*  ::assets::Character */ ,(int)offsetof(PlayState_obj,player3),HX_("player3",b2,09,15,8a)},
	{::hx::fsObject /*  ::assets::Character */ ,(int)offsetof(PlayState_obj,player4),HX_("player4",b3,09,15,8a)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,players),HX_("players",f2,09,15,8a)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,turnOrder),HX_("turnOrder",d1,af,90,01)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,activePlayer),HX_("activePlayer",c7,39,d4,97)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,dieRoll),HX_("dieRoll",dd,f4,db,97)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("player1",b0,09,15,8a),
	HX_("player2",b1,09,15,8a),
	HX_("player3",b2,09,15,8a),
	HX_("player4",b3,09,15,8a),
	HX_("players",f2,09,15,8a),
	HX_("turnOrder",d1,af,90,01),
	HX_("activePlayer",c7,39,d4,97),
	HX_("dieRoll",dd,f4,db,97),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("rollDice",84,73,59,0b),
	HX_("playerMove",12,bf,22,ab),
	::String(null()) };

::hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("gameplay.PlayState",d5,eb,35,db);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace gameplay
