// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_math_FlxVelocity
#include <flixel/math/FlxVelocity.h>
#endif
#ifndef INCLUDED_flixel_path_FlxPath
#include <flixel/path/FlxPath.h>
#endif
#ifndef INCLUDED_flixel_path_FlxTypedBasePath
#include <flixel/path/FlxTypedBasePath.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c625bfaa5b4263df_75_new,"flixel.FlxObject","new",0x2aa4ec91,"flixel.FlxObject.new","flixel/FlxObject.hx",75,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_862_initVars,"flixel.FlxObject","initVars",0xb8a66d0b,"flixel.FlxObject.initVars","flixel/FlxObject.hx",862,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_876_initMotionVars,"flixel.FlxObject","initMotionVars",0xb01943a1,"flixel.FlxObject.initMotionVars","flixel/FlxObject.hx",876,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_894_destroy,"flixel.FlxObject","destroy",0xba37b5ab,"flixel.FlxObject.destroy","flixel/FlxObject.hx",894,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_912_update,"flixel.FlxObject","update",0x87b15e78,"flixel.FlxObject.update","flixel/FlxObject.hx",912,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_937_updateMotion,"flixel.FlxObject","updateMotion",0x420d82ce,"flixel.FlxObject.updateMotion","flixel/FlxObject.hx",937,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_960_draw,"flixel.FlxObject","draw",0x1f17bab3,"flixel.FlxObject.draw","flixel/FlxObject.hx",960,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_982_overlaps,"flixel.FlxObject","overlaps",0xaad0e53b,"flixel.FlxObject.overlaps","flixel/FlxObject.hx",982,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_986_overlaps,"flixel.FlxObject","overlaps",0xaad0e53b,"flixel.FlxObject.overlaps","flixel/FlxObject.hx",986,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1018_overlapsCallback,"flixel.FlxObject","overlapsCallback",0xe4196e20,"flixel.FlxObject.overlapsCallback","flixel/FlxObject.hx",1018,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1041_overlapsAt,"flixel.FlxObject","overlapsAt",0xacc1230e,"flixel.FlxObject.overlapsAt","flixel/FlxObject.hx",1041,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1045_overlapsAt,"flixel.FlxObject","overlapsAt",0xacc1230e,"flixel.FlxObject.overlapsAt","flixel/FlxObject.hx",1045,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1079_overlapsAtCallback,"flixel.FlxObject","overlapsAtCallback",0xb90836f3,"flixel.FlxObject.overlapsAtCallback","flixel/FlxObject.hx",1079,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1092_overlapsPoint,"flixel.FlxObject","overlapsPoint",0xcd9c6915,"flixel.FlxObject.overlapsPoint","flixel/FlxObject.hx",1092,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1117_inWorldBounds,"flixel.FlxObject","inWorldBounds",0x89d0e9f3,"flixel.FlxObject.inWorldBounds","flixel/FlxObject.hx",1117,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1128_getScreenPosition,"flixel.FlxObject","getScreenPosition",0x643c435c,"flixel.FlxObject.getScreenPosition","flixel/FlxObject.hx",1128,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1149_getPosition,"flixel.FlxObject","getPosition",0x1bf09890,"flixel.FlxObject.getPosition","flixel/FlxObject.hx",1149,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1164_getMidpoint,"flixel.FlxObject","getMidpoint",0x7bfe0daf,"flixel.FlxObject.getMidpoint","flixel/FlxObject.hx",1164,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1171_getHitbox,"flixel.FlxObject","getHitbox",0x5f284dbf,"flixel.FlxObject.getHitbox","flixel/FlxObject.hx",1171,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1185_reset,"flixel.FlxObject","reset",0x1cbd9440,"flixel.FlxObject.reset","flixel/FlxObject.hx",1185,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1202_isOnScreen,"flixel.FlxObject","isOnScreen",0x4aab7fe4,"flixel.FlxObject.isOnScreen","flixel/FlxObject.hx",1202,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1214_isPixelPerfectRender,"flixel.FlxObject","isPixelPerfectRender",0xc4c93916,"flixel.FlxObject.isPixelPerfectRender","flixel/FlxObject.hx",1214,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1229_isTouching,"flixel.FlxObject","isTouching",0x23c6647c,"flixel.FlxObject.isTouching","flixel/FlxObject.hx",1229,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1241_justTouched,"flixel.FlxObject","justTouched",0xbcba8e43,"flixel.FlxObject.justTouched","flixel/FlxObject.hx",1241,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1267_screenCenter,"flixel.FlxObject","screenCenter",0x59e58410,"flixel.FlxObject.screenCenter","flixel/FlxObject.hx",1267,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1285_setPosition,"flixel.FlxObject","setPosition",0x265d9f9c,"flixel.FlxObject.setPosition","flixel/FlxObject.hx",1285,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1297_setSize,"flixel.FlxObject","setSize",0xa7896a34,"flixel.FlxObject.setSize","flixel/FlxObject.hx",1297,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1389_getBoundingBox,"flixel.FlxObject","getBoundingBox",0x58364780,"flixel.FlxObject.getBoundingBox","flixel/FlxObject.hx",1389,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1413_getRotatedBounds,"flixel.FlxObject","getRotatedBounds",0x6b926bb7,"flixel.FlxObject.getRotatedBounds","flixel/FlxObject.hx",1413,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1426_toString,"flixel.FlxObject","toString",0x9e14e2db,"flixel.FlxObject.toString","flixel/FlxObject.hx",1426,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1439_set_x,"flixel.FlxObject","set_x",0xb024e5cc,"flixel.FlxObject.set_x","flixel/FlxObject.hx",1439,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1445_set_y,"flixel.FlxObject","set_y",0xb024e5cd,"flixel.FlxObject.set_y","flixel/FlxObject.hx",1445,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1459_set_width,"flixel.FlxObject","set_width",0x7d06d55a,"flixel.FlxObject.set_width","flixel/FlxObject.hx",1459,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1473_set_height,"flixel.FlxObject","set_height",0x9f435213,"flixel.FlxObject.set_height","flixel/FlxObject.hx",1473,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1479_get_width,"flixel.FlxObject","get_width",0x99b5e94e,"flixel.FlxObject.get_width","flixel/FlxObject.hx",1479,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1485_get_height,"flixel.FlxObject","get_height",0x9bc5b39f,"flixel.FlxObject.get_height","flixel/FlxObject.hx",1485,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1491_get_solid,"flixel.FlxObject","get_solid",0x5018e773,"flixel.FlxObject.get_solid","flixel/FlxObject.hx",1491,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1496_set_solid,"flixel.FlxObject","set_solid",0x3369d37f,"flixel.FlxObject.set_solid","flixel/FlxObject.hx",1496,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1504_set_angle,"flixel.FlxObject","set_angle",0xd5866327,"flixel.FlxObject.set_angle","flixel/FlxObject.hx",1504,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1510_set_moves,"flixel.FlxObject","set_moves",0xbf09eb96,"flixel.FlxObject.set_moves","flixel/FlxObject.hx",1510,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1516_set_immovable,"flixel.FlxObject","set_immovable",0xc5b8805e,"flixel.FlxObject.set_immovable","flixel/FlxObject.hx",1516,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1522_set_pixelPerfectRender,"flixel.FlxObject","set_pixelPerfectRender",0x84233609,"flixel.FlxObject.set_pixelPerfectRender","flixel/FlxObject.hx",1522,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1528_set_allowCollisions,"flixel.FlxObject","set_allowCollisions",0x7975d9fe,"flixel.FlxObject.set_allowCollisions","flixel/FlxObject.hx",1528,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1534_get_collisonXDrag,"flixel.FlxObject","get_collisonXDrag",0x511e85df,"flixel.FlxObject.get_collisonXDrag","flixel/FlxObject.hx",1534,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1539_set_collisonXDrag,"flixel.FlxObject","set_collisonXDrag",0x748c5deb,"flixel.FlxObject.set_collisonXDrag","flixel/FlxObject.hx",1539,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_1566_set_path,"flixel.FlxObject","set_path",0xde100cd1,"flixel.FlxObject.set_path","flixel/FlxObject.hx",1566,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_170_allowCollisionDrag,"flixel.FlxObject","allowCollisionDrag",0x3ed42e2c,"flixel.FlxObject.allowCollisionDrag","flixel/FlxObject.hx",170,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_194_processCheckTilemap,"flixel.FlxObject","processCheckTilemap",0x19484f86,"flixel.FlxObject.processCheckTilemap","flixel/FlxObject.hx",194,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_207_processCheckTilemap,"flixel.FlxObject","processCheckTilemap",0x19484f86,"flixel.FlxObject.processCheckTilemap","flixel/FlxObject.hx",207,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_218_processCheckTilemap,"flixel.FlxObject","processCheckTilemap",0x19484f86,"flixel.FlxObject.processCheckTilemap","flixel/FlxObject.hx",218,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_233_separate,"flixel.FlxObject","separate",0x6cc23192,"flixel.FlxObject.separate","flixel/FlxObject.hx",233,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_261_separateX,"flixel.FlxObject","separateX",0xbd292e86,"flixel.FlxObject.separateX","flixel/FlxObject.hx",261,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_272_separateY,"flixel.FlxObject","separateY",0xbd292e87,"flixel.FlxObject.separateY","flixel/FlxObject.hx",272,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_279_separateXHelper,"flixel.FlxObject","separateXHelper",0x5a5ec894,"flixel.FlxObject.separateXHelper","flixel/FlxObject.hx",279,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_331_separateYHelper,"flixel.FlxObject","separateYHelper",0x83f43f55,"flixel.FlxObject.separateYHelper","flixel/FlxObject.hx",331,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_386_legacySeparateX,"flixel.FlxObject","legacySeparateX",0x766fcdbd,"flixel.FlxObject.legacySeparateX","flixel/FlxObject.hx",386,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_408_legacySeparateY,"flixel.FlxObject","legacySeparateY",0x766fcdbe,"flixel.FlxObject.legacySeparateY","flixel/FlxObject.hx",408,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_434_updateTouchingFlags,"flixel.FlxObject","updateTouchingFlags",0x15a0502c,"flixel.FlxObject.updateTouchingFlags","flixel/FlxObject.hx",434,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_432_updateTouchingFlags,"flixel.FlxObject","updateTouchingFlags",0x15a0502c,"flixel.FlxObject.updateTouchingFlags","flixel/FlxObject.hx",432,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_450_updateTouchingFlagsX,"flixel.FlxObject","updateTouchingFlagsX",0xd6a5d6ac,"flixel.FlxObject.updateTouchingFlagsX","flixel/FlxObject.hx",450,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_456_updateTouchingFlagsXHelper,"flixel.FlxObject","updateTouchingFlagsXHelper",0xfaf9113a,"flixel.FlxObject.updateTouchingFlagsXHelper","flixel/FlxObject.hx",456,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_467_updateTouchingFlagsY,"flixel.FlxObject","updateTouchingFlagsY",0xd6a5d6ad,"flixel.FlxObject.updateTouchingFlagsY","flixel/FlxObject.hx",467,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_473_updateTouchingFlagsYHelper,"flixel.FlxObject","updateTouchingFlagsYHelper",0x248e87fb,"flixel.FlxObject.updateTouchingFlagsYHelper","flixel/FlxObject.hx",473,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_482_computeOverlapX,"flixel.FlxObject","computeOverlapX",0x240ec739,"flixel.FlxObject.computeOverlapX","flixel/FlxObject.hx",482,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_552_computeOverlapY,"flixel.FlxObject","computeOverlapY",0x240ec73a,"flixel.FlxObject.computeOverlapY","flixel/FlxObject.hx",552,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_80_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",80,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_87_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",87,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_94_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",94,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_102_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",102,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_110_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",110,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_118_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",118,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_126_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",126,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_134_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",134,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_142_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",142,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_150_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",150,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_158_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",158,0xf0fe0d80)
HX_LOCAL_STACK_FRAME(_hx_pos_c625bfaa5b4263df_166_boot,"flixel.FlxObject","boot",0x1dc312e1,"flixel.FlxObject.boot","flixel/FlxObject.hx",166,0xf0fe0d80)
namespace flixel{

void FlxObject_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_width,::hx::Null< Float >  __o_height){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            		Float width = __o_width.Default(0);
            		Float height = __o_height.Default(0);
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_75_new)
HXLINE( 837)		 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 837)		_this->x = ( (Float)(0) );
HXDLIN( 837)		_this->y = ( (Float)(0) );
HXDLIN( 837)		_this->width = ( (Float)(0) );
HXDLIN( 837)		_this->height = ( (Float)(0) );
HXDLIN( 837)		 ::flixel::math::FlxRect rect = _this;
HXDLIN( 837)		rect->_inPool = false;
HXDLIN( 837)		this->_rect = rect;
HXLINE( 835)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 835)		point->_inPool = false;
HXDLIN( 835)		this->_point = point;
HXLINE( 832)		this->path = null();
HXLINE( 790)		this->collisionYDrag = 0;
HXLINE( 782)		this->collisionXDrag = 2;
HXLINE( 765)		this->allowCollisions = 4369;
HXLINE( 759)		this->wasTouching = 0;
HXLINE( 753)		this->touching = 0;
HXLINE( 739)		this->maxAngular = ((Float)10000);
HXLINE( 734)		this->angularDrag = ((Float)0);
HXLINE( 729)		this->angularAcceleration = ((Float)0);
HXLINE( 724)		this->angularVelocity = ((Float)0);
HXLINE( 719)		this->elasticity = ((Float)0);
HXLINE( 714)		this->mass = ((Float)1);
HXLINE( 666)		this->immovable = false;
HXLINE( 661)		this->moves = ::flixel::FlxObject_obj::defaultMoves;
HXLINE( 655)		this->angle = ((Float)0);
HXLINE( 649)		this->pixelPerfectPosition = true;
HXLINE( 624)		this->y = ((Float)0);
HXLINE( 619)		this->x = ((Float)0);
HXLINE( 847)		super::__construct();
HXLINE( 849)		this->set_x(x);
HXLINE( 850)		this->set_y(y);
HXLINE( 851)		this->set_width(width);
HXLINE( 852)		this->set_height(height);
HXLINE( 854)		this->initVars();
            	}

Dynamic FlxObject_obj::__CreateEmpty() { return new FlxObject_obj; }

void *FlxObject_obj::_hx_vtable = 0;

Dynamic FlxObject_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxObject_obj > _hx_result = new FlxObject_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool FlxObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7ccf8994) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x7ccf8994;
	} else {
		return inClassId==(int)0x7dab0655;
	}
}

void FlxObject_obj::initVars(){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_862_initVars)
HXLINE( 863)		this->flixelType = 1;
HXLINE( 864)		Float x = this->x;
HXDLIN( 864)		Float y = this->y;
HXDLIN( 864)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 864)		point->_inPool = false;
HXDLIN( 864)		this->last = point;
HXLINE( 865)		 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(1,1);
HXDLIN( 865)		point1->_inPool = false;
HXDLIN( 865)		this->scrollFactor = point1;
HXLINE( 866)		this->pixelPerfectPosition = ::flixel::FlxObject_obj::defaultPixelPerfectPosition;
HXLINE( 868)		{
HXLINE( 868)			 ::flixel::math::FlxBasePoint point2 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 868)			point2->_inPool = false;
HXDLIN( 868)			this->velocity = point2;
HXDLIN( 868)			 ::flixel::math::FlxBasePoint point3 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 868)			point3->_inPool = false;
HXDLIN( 868)			this->acceleration = point3;
HXDLIN( 868)			 ::flixel::math::FlxBasePoint point4 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 868)			point4->_inPool = false;
HXDLIN( 868)			this->drag = point4;
HXDLIN( 868)			 ::flixel::math::FlxBasePoint point5 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(10000,10000);
HXDLIN( 868)			point5->_inPool = false;
HXDLIN( 868)			this->maxVelocity = point5;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxObject_obj,initVars,(void))

void FlxObject_obj::initMotionVars(){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_876_initMotionVars)
HXLINE( 877)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 877)		point->_inPool = false;
HXDLIN( 877)		this->velocity = point;
HXLINE( 878)		 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 878)		point1->_inPool = false;
HXDLIN( 878)		this->acceleration = point1;
HXLINE( 879)		 ::flixel::math::FlxBasePoint point2 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 879)		point2->_inPool = false;
HXDLIN( 879)		this->drag = point2;
HXLINE( 880)		 ::flixel::math::FlxBasePoint point3 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(10000,10000);
HXDLIN( 880)		point3->_inPool = false;
HXDLIN( 880)		this->maxVelocity = point3;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxObject_obj,initMotionVars,(void))

void FlxObject_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_894_destroy)
HXLINE( 895)		this->super::destroy();
HXLINE( 897)		this->velocity = ( ( ::flixel::math::FlxBasePoint)(::flixel::util::FlxDestroyUtil_obj::put(this->velocity)) );
HXLINE( 898)		this->acceleration = ( ( ::flixel::math::FlxBasePoint)(::flixel::util::FlxDestroyUtil_obj::put(this->acceleration)) );
HXLINE( 899)		this->drag = ( ( ::flixel::math::FlxBasePoint)(::flixel::util::FlxDestroyUtil_obj::put(this->drag)) );
HXLINE( 900)		this->maxVelocity = ( ( ::flixel::math::FlxBasePoint)(::flixel::util::FlxDestroyUtil_obj::put(this->maxVelocity)) );
HXLINE( 901)		this->scrollFactor = ( ( ::flixel::math::FlxBasePoint)(::flixel::util::FlxDestroyUtil_obj::put(this->scrollFactor)) );
HXLINE( 902)		this->last = ( ( ::flixel::math::FlxBasePoint)(::flixel::util::FlxDestroyUtil_obj::put(this->last)) );
HXLINE( 903)		this->_point = ( ( ::flixel::math::FlxBasePoint)(::flixel::util::FlxDestroyUtil_obj::put(this->_point)) );
HXLINE( 904)		this->_rect = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(this->_rect)) );
            	}


void FlxObject_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_912_update)
HXLINE( 918)		{
HXLINE( 918)			 ::flixel::math::FlxBasePoint this1 = this->last;
HXDLIN( 918)			Float y = this->y;
HXDLIN( 918)			this1->set_x(this->x);
HXDLIN( 918)			this1->set_y(y);
            		}
HXLINE( 920)		bool _hx_tmp;
HXDLIN( 920)		if (::hx::IsNotNull( this->path )) {
HXLINE( 920)			_hx_tmp = this->path->active;
            		}
            		else {
HXLINE( 920)			_hx_tmp = false;
            		}
HXDLIN( 920)		if (_hx_tmp) {
HXLINE( 921)			this->path->update(elapsed);
            		}
HXLINE( 923)		if (this->moves) {
HXLINE( 924)			this->updateMotion(elapsed);
            		}
HXLINE( 926)		this->wasTouching = this->touching;
HXLINE( 927)		this->touching = 0;
            	}


void FlxObject_obj::updateMotion(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_937_updateMotion)
HXLINE( 938)		Float velocityDelta = ::flixel::math::FlxVelocity_obj::computeVelocity(this->angularVelocity,this->angularAcceleration,this->angularDrag,this->maxAngular,elapsed);
HXDLIN( 938)		Float velocityDelta1 = (((Float)0.5) * (velocityDelta - this->angularVelocity));
HXLINE( 939)		 ::flixel::FlxObject _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 939)		_hx_tmp->angularVelocity = (_hx_tmp->angularVelocity + velocityDelta1);
HXLINE( 940)		this->set_angle((this->angle + (this->angularVelocity * elapsed)));
HXLINE( 941)		 ::flixel::FlxObject _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 941)		_hx_tmp1->angularVelocity = (_hx_tmp1->angularVelocity + velocityDelta1);
HXLINE( 943)		Float velocityDelta2 = ::flixel::math::FlxVelocity_obj::computeVelocity(this->velocity->x,this->acceleration->x,this->drag->x,this->maxVelocity->x,elapsed);
HXDLIN( 943)		velocityDelta1 = (((Float)0.5) * (velocityDelta2 - this->velocity->x));
HXLINE( 944)		this->velocity->set_x((this->velocity->x + velocityDelta1));
HXLINE( 945)		Float delta = (this->velocity->x * elapsed);
HXLINE( 946)		this->velocity->set_x((this->velocity->x + velocityDelta1));
HXLINE( 947)		this->set_x((this->x + delta));
HXLINE( 949)		Float velocityDelta3 = ::flixel::math::FlxVelocity_obj::computeVelocity(this->velocity->y,this->acceleration->y,this->drag->y,this->maxVelocity->y,elapsed);
HXDLIN( 949)		velocityDelta1 = (((Float)0.5) * (velocityDelta3 - this->velocity->y));
HXLINE( 950)		this->velocity->set_y((this->velocity->y + velocityDelta1));
HXLINE( 951)		delta = (this->velocity->y * elapsed);
HXLINE( 952)		this->velocity->set_y((this->velocity->y + velocityDelta1));
HXLINE( 953)		this->set_y((this->y + delta));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,updateMotion,(void))

void FlxObject_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_960_draw)
            	}


bool FlxObject_obj::overlaps( ::flixel::FlxBasic objectOrGroup,::hx::Null< bool >  __o_inScreenSpace, ::flixel::FlxCamera camera){
            		bool inScreenSpace = __o_inScreenSpace.Default(false);
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_982_overlaps)
HXLINE( 983)		 ::flixel::group::FlxTypedGroup group = ::flixel::group::FlxTypedGroup_obj::resolveGroup(objectOrGroup);
HXLINE( 984)		if (::hx::IsNotNull( group )) {
            			HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxObject,_g,bool,inScreenSpace1, ::flixel::FlxCamera,camera1) HXARGC(1)
            			bool _hx_run( ::flixel::FlxBasic objectOrGroup){
            				HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_986_overlaps)
HXLINE( 986)				return _g->overlaps(objectOrGroup,inScreenSpace1,camera1);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 986)			 ::flixel::FlxObject _g = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 986)			Float x = ( (Float)(0) );
HXDLIN( 986)			Float y = ( (Float)(0) );
HXDLIN( 986)			bool inScreenSpace1 = inScreenSpace;
HXDLIN( 986)			 ::flixel::FlxCamera camera1 = camera;
HXDLIN( 986)			return group->any( ::Dynamic(new _hx_Closure_0(_g,inScreenSpace1,camera1)));
            		}
HXLINE( 989)		if ((objectOrGroup->flixelType == 3)) {
HXLINE( 993)			 ::flixel::tile::FlxBaseTilemap tilemap = ( ( ::flixel::tile::FlxBaseTilemap)(objectOrGroup) );
HXLINE( 994)			return tilemap->overlaps(::hx::ObjectPtr<OBJ_>(this),inScreenSpace,camera);
            		}
HXLINE( 997)		 ::flixel::FlxObject object = ( ( ::flixel::FlxObject)(objectOrGroup) );
HXLINE( 998)		if (!(inScreenSpace)) {
HXLINE(1000)			bool _hx_tmp;
HXDLIN(1000)			bool _hx_tmp1;
HXDLIN(1000)			Float object1 = object->x;
HXDLIN(1000)			Float _hx_tmp2 = (object1 + object->get_width());
HXDLIN(1000)			if ((_hx_tmp2 > this->x)) {
HXLINE(1000)				Float object2 = object->x;
HXDLIN(1000)				Float _hx_tmp3 = this->x;
HXDLIN(1000)				_hx_tmp1 = (object2 < (_hx_tmp3 + this->get_width()));
            			}
            			else {
HXLINE(1000)				_hx_tmp1 = false;
            			}
HXDLIN(1000)			if (_hx_tmp1) {
HXLINE(1000)				Float object3 = object->y;
HXDLIN(1000)				Float _hx_tmp4 = (object3 + object->get_height());
HXDLIN(1000)				_hx_tmp = (_hx_tmp4 > this->y);
            			}
            			else {
HXLINE(1000)				_hx_tmp = false;
            			}
HXDLIN(1000)			if (_hx_tmp) {
HXLINE(1000)				Float object4 = object->y;
HXDLIN(1000)				Float _hx_tmp5 = this->y;
HXDLIN(1000)				return (object4 < (_hx_tmp5 + this->get_height()));
            			}
            			else {
HXLINE(1000)				return false;
            			}
            		}
HXLINE(1003)		if (::hx::IsNull( camera )) {
HXLINE(1005)			camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE(1007)		 ::flixel::math::FlxBasePoint objectScreenPos = object->getScreenPosition(null(),camera);
HXLINE(1008)		this->getScreenPosition(this->_point,camera);
HXLINE(1009)		bool _hx_tmp6;
HXDLIN(1009)		bool _hx_tmp7;
HXDLIN(1009)		Float objectScreenPos1 = objectScreenPos->x;
HXDLIN(1009)		Float _hx_tmp8 = (objectScreenPos1 + object->get_width());
HXDLIN(1009)		if ((_hx_tmp8 > this->_point->x)) {
HXLINE(1010)			Float objectScreenPos2 = objectScreenPos->x;
HXDLIN(1010)			Float _hx_tmp9 = this->_point->x;
HXLINE(1009)			_hx_tmp7 = (objectScreenPos2 < (_hx_tmp9 + this->get_width()));
            		}
            		else {
HXLINE(1009)			_hx_tmp7 = false;
            		}
HXDLIN(1009)		if (_hx_tmp7) {
HXLINE(1011)			Float objectScreenPos3 = objectScreenPos->y;
HXDLIN(1011)			Float _hx_tmp10 = (objectScreenPos3 + object->get_height());
HXLINE(1009)			_hx_tmp6 = (_hx_tmp10 > this->_point->y);
            		}
            		else {
HXLINE(1009)			_hx_tmp6 = false;
            		}
HXDLIN(1009)		if (_hx_tmp6) {
HXLINE(1012)			Float objectScreenPos4 = objectScreenPos->y;
HXDLIN(1012)			Float _hx_tmp11 = this->_point->y;
HXDLIN(1012)			return (objectScreenPos4 < (_hx_tmp11 + this->get_height()));
            		}
            		else {
HXLINE(1009)			return false;
            		}
HXDLIN(1009)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxObject_obj,overlaps,return )

bool FlxObject_obj::overlapsCallback( ::flixel::FlxBasic objectOrGroup,Float x,Float y,bool inScreenSpace, ::flixel::FlxCamera camera){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1018_overlapsCallback)
HXDLIN(1018)		return this->overlaps(objectOrGroup,inScreenSpace,camera);
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxObject_obj,overlapsCallback,return )

bool FlxObject_obj::overlapsAt(Float x,Float y, ::flixel::FlxBasic objectOrGroup,::hx::Null< bool >  __o_inScreenSpace, ::flixel::FlxCamera camera){
            		bool inScreenSpace = __o_inScreenSpace.Default(false);
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1041_overlapsAt)
HXLINE(1042)		 ::flixel::group::FlxTypedGroup group = ::flixel::group::FlxTypedGroup_obj::resolveGroup(objectOrGroup);
HXLINE(1043)		if (::hx::IsNotNull( group )) {
            			HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_0,Float,y1,Float,x1, ::flixel::FlxObject,_g,bool,inScreenSpace1, ::flixel::FlxCamera,camera1) HXARGC(1)
            			bool _hx_run( ::flixel::FlxBasic objectOrGroup){
            				HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1045_overlapsAt)
HXLINE(1045)				return _g->overlapsAt(x1,y1,objectOrGroup,inScreenSpace1,camera1);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1045)			 ::flixel::FlxObject _g = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1045)			Float x1 = x;
HXDLIN(1045)			Float y1 = y;
HXDLIN(1045)			bool inScreenSpace1 = inScreenSpace;
HXDLIN(1045)			 ::flixel::FlxCamera camera1 = camera;
HXDLIN(1045)			return group->any( ::Dynamic(new _hx_Closure_0(y1,x1,_g,inScreenSpace1,camera1)));
            		}
HXLINE(1048)		if ((objectOrGroup->flixelType == 3)) {
HXLINE(1054)			 ::flixel::tile::FlxBaseTilemap tilemap = ( ( ::flixel::tile::FlxBaseTilemap)(objectOrGroup) );
HXLINE(1055)			return tilemap->overlapsAt((tilemap->x - (x - this->x)),(tilemap->y - (y - this->y)),::hx::ObjectPtr<OBJ_>(this),inScreenSpace,camera);
            		}
HXLINE(1058)		 ::flixel::FlxObject object = ( ( ::flixel::FlxObject)(objectOrGroup) );
HXLINE(1059)		if (!(inScreenSpace)) {
HXLINE(1061)			bool _hx_tmp;
HXDLIN(1061)			bool _hx_tmp1;
HXDLIN(1061)			Float object1 = object->x;
HXDLIN(1061)			if (((object1 + object->get_width()) > x)) {
HXLINE(1061)				Float object2 = object->x;
HXDLIN(1061)				_hx_tmp1 = (object2 < (x + this->get_width()));
            			}
            			else {
HXLINE(1061)				_hx_tmp1 = false;
            			}
HXDLIN(1061)			if (_hx_tmp1) {
HXLINE(1061)				Float object3 = object->y;
HXDLIN(1061)				_hx_tmp = ((object3 + object->get_height()) > y);
            			}
            			else {
HXLINE(1061)				_hx_tmp = false;
            			}
HXDLIN(1061)			if (_hx_tmp) {
HXLINE(1061)				Float object4 = object->y;
HXDLIN(1061)				return (object4 < (y + this->get_height()));
            			}
            			else {
HXLINE(1061)				return false;
            			}
            		}
HXLINE(1064)		if (::hx::IsNull( camera )) {
HXLINE(1066)			camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE(1068)		 ::flixel::math::FlxBasePoint objectScreenPos = object->getScreenPosition(null(),camera);
HXLINE(1069)		this->getScreenPosition(this->_point,camera);
HXLINE(1070)		bool _hx_tmp2;
HXDLIN(1070)		bool _hx_tmp3;
HXDLIN(1070)		Float objectScreenPos1 = objectScreenPos->x;
HXDLIN(1070)		Float _hx_tmp4 = (objectScreenPos1 + object->get_width());
HXDLIN(1070)		if ((_hx_tmp4 > this->_point->x)) {
HXLINE(1071)			Float objectScreenPos2 = objectScreenPos->x;
HXDLIN(1071)			Float _hx_tmp5 = this->_point->x;
HXLINE(1070)			_hx_tmp3 = (objectScreenPos2 < (_hx_tmp5 + this->get_width()));
            		}
            		else {
HXLINE(1070)			_hx_tmp3 = false;
            		}
HXDLIN(1070)		if (_hx_tmp3) {
HXLINE(1072)			Float objectScreenPos3 = objectScreenPos->y;
HXDLIN(1072)			Float _hx_tmp6 = (objectScreenPos3 + object->get_height());
HXLINE(1070)			_hx_tmp2 = (_hx_tmp6 > this->_point->y);
            		}
            		else {
HXLINE(1070)			_hx_tmp2 = false;
            		}
HXDLIN(1070)		if (_hx_tmp2) {
HXLINE(1073)			Float objectScreenPos4 = objectScreenPos->y;
HXDLIN(1073)			Float _hx_tmp7 = this->_point->y;
HXDLIN(1073)			return (objectScreenPos4 < (_hx_tmp7 + this->get_height()));
            		}
            		else {
HXLINE(1070)			return false;
            		}
HXDLIN(1070)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxObject_obj,overlapsAt,return )

bool FlxObject_obj::overlapsAtCallback( ::flixel::FlxBasic objectOrGroup,Float x,Float y,bool inScreenSpace, ::flixel::FlxCamera camera){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1079_overlapsAtCallback)
HXDLIN(1079)		return this->overlapsAt(x,y,objectOrGroup,inScreenSpace,camera);
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxObject_obj,overlapsAtCallback,return )

bool FlxObject_obj::overlapsPoint( ::flixel::math::FlxBasePoint point,::hx::Null< bool >  __o_inScreenSpace, ::flixel::FlxCamera camera){
            		bool inScreenSpace = __o_inScreenSpace.Default(false);
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1092_overlapsPoint)
HXLINE(1093)		if (!(inScreenSpace)) {
HXLINE(1095)			bool _hx_tmp;
HXDLIN(1095)			bool _hx_tmp1;
HXDLIN(1095)			if ((point->x >= this->x)) {
HXLINE(1095)				Float point1 = point->x;
HXDLIN(1095)				Float _hx_tmp2 = this->x;
HXDLIN(1095)				_hx_tmp1 = (point1 < (_hx_tmp2 + this->get_width()));
            			}
            			else {
HXLINE(1095)				_hx_tmp1 = false;
            			}
HXDLIN(1095)			if (_hx_tmp1) {
HXLINE(1095)				_hx_tmp = (point->y >= this->y);
            			}
            			else {
HXLINE(1095)				_hx_tmp = false;
            			}
HXDLIN(1095)			if (_hx_tmp) {
HXLINE(1095)				Float point2 = point->y;
HXDLIN(1095)				Float _hx_tmp3 = this->y;
HXDLIN(1095)				return (point2 < (_hx_tmp3 + this->get_height()));
            			}
            			else {
HXLINE(1095)				return false;
            			}
            		}
HXLINE(1098)		if (::hx::IsNull( camera )) {
HXLINE(1100)			camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE(1102)		Float xPos = (point->x - camera->scroll->x);
HXLINE(1103)		Float yPos = (point->y - camera->scroll->y);
HXLINE(1104)		this->getScreenPosition(this->_point,camera);
HXLINE(1105)		if (point->_weak) {
HXLINE(1105)			point->put();
            		}
HXLINE(1106)		bool _hx_tmp4;
HXDLIN(1106)		bool _hx_tmp5;
HXDLIN(1106)		if ((xPos >= this->_point->x)) {
HXLINE(1106)			Float _hx_tmp6 = this->_point->x;
HXDLIN(1106)			_hx_tmp5 = (xPos < (_hx_tmp6 + this->get_width()));
            		}
            		else {
HXLINE(1106)			_hx_tmp5 = false;
            		}
HXDLIN(1106)		if (_hx_tmp5) {
HXLINE(1106)			_hx_tmp4 = (yPos >= this->_point->y);
            		}
            		else {
HXLINE(1106)			_hx_tmp4 = false;
            		}
HXDLIN(1106)		if (_hx_tmp4) {
HXLINE(1106)			Float _hx_tmp7 = this->_point->y;
HXDLIN(1106)			return (yPos < (_hx_tmp7 + this->get_height()));
            		}
            		else {
HXLINE(1106)			return false;
            		}
HXDLIN(1106)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxObject_obj,overlapsPoint,return )

bool FlxObject_obj::inWorldBounds(){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1117_inWorldBounds)
HXDLIN(1117)		bool _hx_tmp;
HXDLIN(1117)		bool _hx_tmp1;
HXDLIN(1117)		Float _hx_tmp2 = this->x;
HXDLIN(1117)		Float _hx_tmp3 = (_hx_tmp2 + this->get_width());
HXDLIN(1117)		if ((_hx_tmp3 > ::flixel::FlxG_obj::worldBounds->x)) {
HXDLIN(1117)			 ::flixel::math::FlxRect _this = ::flixel::FlxG_obj::worldBounds;
HXDLIN(1117)			_hx_tmp1 = (this->x < (_this->x + _this->width));
            		}
            		else {
HXDLIN(1117)			_hx_tmp1 = false;
            		}
HXDLIN(1117)		if (_hx_tmp1) {
HXDLIN(1117)			Float _hx_tmp4 = this->y;
HXDLIN(1117)			Float _hx_tmp5 = (_hx_tmp4 + this->get_height());
HXDLIN(1117)			_hx_tmp = (_hx_tmp5 > ::flixel::FlxG_obj::worldBounds->y);
            		}
            		else {
HXDLIN(1117)			_hx_tmp = false;
            		}
HXDLIN(1117)		if (_hx_tmp) {
HXDLIN(1117)			 ::flixel::math::FlxRect _this1 = ::flixel::FlxG_obj::worldBounds;
HXDLIN(1117)			return (this->y < (_this1->y + _this1->height));
            		}
            		else {
HXDLIN(1117)			return false;
            		}
HXDLIN(1117)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxObject_obj,inWorldBounds,return )

 ::flixel::math::FlxBasePoint FlxObject_obj::getScreenPosition( ::flixel::math::FlxBasePoint result, ::flixel::FlxCamera camera){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1128_getScreenPosition)
HXLINE(1129)		if (::hx::IsNull( result )) {
HXLINE(1130)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1130)			point->_inPool = false;
HXDLIN(1130)			result = point;
            		}
HXLINE(1132)		if (::hx::IsNull( camera )) {
HXLINE(1133)			camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE(1135)		{
HXLINE(1135)			Float y = this->y;
HXDLIN(1135)			result->set_x(this->x);
HXDLIN(1135)			result->set_y(y);
            		}
HXLINE(1136)		if (this->pixelPerfectPosition) {
HXLINE(1137)			result->set_x(( (Float)(::Math_obj::floor(result->x)) ));
HXDLIN(1137)			result->set_y(( (Float)(::Math_obj::floor(result->y)) ));
            		}
HXLINE(1139)		Float y1 = (camera->scroll->y * this->scrollFactor->y);
HXDLIN(1139)		result->set_x((result->x - (camera->scroll->x * this->scrollFactor->x)));
HXDLIN(1139)		result->set_y((result->y - y1));
HXDLIN(1139)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,getScreenPosition,return )

 ::flixel::math::FlxBasePoint FlxObject_obj::getPosition( ::flixel::math::FlxBasePoint result){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1149_getPosition)
HXLINE(1150)		if (::hx::IsNull( result )) {
HXLINE(1151)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1151)			point->_inPool = false;
HXDLIN(1151)			result = point;
            		}
HXLINE(1153)		Float y = this->y;
HXDLIN(1153)		result->set_x(this->x);
HXDLIN(1153)		result->set_y(y);
HXDLIN(1153)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,getPosition,return )

 ::flixel::math::FlxBasePoint FlxObject_obj::getMidpoint( ::flixel::math::FlxBasePoint point){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1164_getMidpoint)
HXLINE(1165)		if (::hx::IsNull( point )) {
HXLINE(1166)			 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1166)			point1->_inPool = false;
HXDLIN(1166)			point = point1;
            		}
HXLINE(1167)		Float x = this->x;
HXDLIN(1167)		Float x1 = (x + (this->get_width() * ((Float)0.5)));
HXDLIN(1167)		Float y = this->y;
HXDLIN(1167)		Float y1 = (y + (this->get_height() * ((Float)0.5)));
HXDLIN(1167)		point->set_x(x1);
HXDLIN(1167)		point->set_y(y1);
HXDLIN(1167)		return point;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,getMidpoint,return )

 ::flixel::math::FlxRect FlxObject_obj::getHitbox( ::flixel::math::FlxRect rect){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1171_getHitbox)
HXLINE(1172)		if (::hx::IsNull( rect )) {
HXLINE(1173)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN(1173)			_this->x = ( (Float)(0) );
HXDLIN(1173)			_this->y = ( (Float)(0) );
HXDLIN(1173)			_this->width = ( (Float)(0) );
HXDLIN(1173)			_this->height = ( (Float)(0) );
HXDLIN(1173)			 ::flixel::math::FlxRect rect1 = _this;
HXDLIN(1173)			rect1->_inPool = false;
HXDLIN(1173)			rect = rect1;
            		}
HXLINE(1174)		Float X = this->x;
HXDLIN(1174)		Float Y = this->y;
HXDLIN(1174)		Float Width = this->get_width();
HXDLIN(1174)		Float Height = this->get_height();
HXDLIN(1174)		rect->x = X;
HXDLIN(1174)		rect->y = Y;
HXDLIN(1174)		rect->width = Width;
HXDLIN(1174)		rect->height = Height;
HXDLIN(1174)		return rect;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,getHitbox,return )

void FlxObject_obj::reset(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1185_reset)
HXLINE(1186)		this->touching = 0;
HXLINE(1187)		this->wasTouching = 0;
HXLINE(1188)		this->setPosition(x,y);
HXLINE(1189)		{
HXLINE(1189)			 ::flixel::math::FlxBasePoint this1 = this->last;
HXDLIN(1189)			Float y1 = this->y;
HXDLIN(1189)			this1->set_x(this->x);
HXDLIN(1189)			this1->set_y(y1);
            		}
HXLINE(1190)		{
HXLINE(1190)			 ::flixel::math::FlxBasePoint this2 = this->velocity;
HXDLIN(1190)			this2->set_x(( (Float)(0) ));
HXDLIN(1190)			this2->set_y(( (Float)(0) ));
            		}
HXLINE(1191)		this->revive();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,reset,(void))

bool FlxObject_obj::isOnScreen( ::flixel::FlxCamera camera){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1202_isOnScreen)
HXLINE(1203)		if (::hx::IsNull( camera )) {
HXLINE(1204)			camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE(1206)		this->getScreenPosition(this->_point,camera);
HXLINE(1207)		 ::flixel::math::FlxBasePoint point = this->_point;
HXDLIN(1207)		Float width = this->get_width();
HXDLIN(1207)		Float height = this->get_height();
HXDLIN(1207)		bool contained;
HXDLIN(1207)		bool contained1;
HXDLIN(1207)		bool contained2;
HXDLIN(1207)		if (((point->x + width) > camera->viewMarginX)) {
HXLINE(1207)			contained2 = (point->x < (( (Float)(camera->width) ) - camera->viewMarginX));
            		}
            		else {
HXLINE(1207)			contained2 = false;
            		}
HXDLIN(1207)		if (contained2) {
HXLINE(1207)			contained1 = ((point->y + height) > camera->viewMarginY);
            		}
            		else {
HXLINE(1207)			contained1 = false;
            		}
HXDLIN(1207)		if (contained1) {
HXLINE(1207)			contained = (point->y < (( (Float)(camera->height) ) - camera->viewMarginY));
            		}
            		else {
HXLINE(1207)			contained = false;
            		}
HXDLIN(1207)		if (point->_weak) {
HXLINE(1207)			point->put();
            		}
HXDLIN(1207)		return contained;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,isOnScreen,return )

bool FlxObject_obj::isPixelPerfectRender( ::flixel::FlxCamera camera){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1214_isPixelPerfectRender)
HXLINE(1215)		if (::hx::IsNull( camera )) {
HXLINE(1216)			camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE(1217)		if (::hx::IsNull( this->pixelPerfectRender )) {
HXLINE(1217)			return camera->pixelPerfectRender;
            		}
            		else {
HXLINE(1217)			return ( (bool)(this->pixelPerfectRender) );
            		}
HXDLIN(1217)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,isPixelPerfectRender,return )

bool FlxObject_obj::isTouching(int direction){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1229_isTouching)
HXDLIN(1229)		return ((this->touching & direction) > 0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,isTouching,return )

bool FlxObject_obj::justTouched(int direction){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1241_justTouched)
HXDLIN(1241)		if (((this->touching & direction) > 0)) {
HXDLIN(1241)			return !(((this->wasTouching & direction) > 0));
            		}
            		else {
HXDLIN(1241)			return false;
            		}
HXDLIN(1241)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,justTouched,return )

 ::flixel::FlxObject FlxObject_obj::screenCenter(::hx::Null< int >  __o_axes){
            		int axes = __o_axes.Default(17);
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1267_screenCenter)
HXLINE(1268)		bool _hx_tmp;
HXDLIN(1268)		if ((axes != 1)) {
HXLINE(1268)			_hx_tmp = (axes == 17);
            		}
            		else {
HXLINE(1268)			_hx_tmp = true;
            		}
HXDLIN(1268)		if (_hx_tmp) {
HXLINE(1269)			int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(1269)			this->set_x(((( (Float)(_hx_tmp1) ) - this->get_width()) / ( (Float)(2) )));
            		}
HXLINE(1271)		bool _hx_tmp2;
HXDLIN(1271)		if ((axes != 16)) {
HXLINE(1271)			_hx_tmp2 = (axes == 17);
            		}
            		else {
HXLINE(1271)			_hx_tmp2 = true;
            		}
HXDLIN(1271)		if (_hx_tmp2) {
HXLINE(1272)			int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(1272)			this->set_y(((( (Float)(_hx_tmp3) ) - this->get_height()) / ( (Float)(2) )));
            		}
HXLINE(1274)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,screenCenter,return )

void FlxObject_obj::setPosition(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y){
            		Float x = __o_x.Default(((Float)0.0));
            		Float y = __o_y.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1285_setPosition)
HXLINE(1286)		this->set_x(x);
HXLINE(1287)		this->set_y(y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,setPosition,(void))

void FlxObject_obj::setSize(Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1297_setSize)
HXLINE(1298)		this->set_width(width);
HXLINE(1299)		this->set_height(height);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,setSize,(void))

 ::flixel::math::FlxRect FlxObject_obj::getBoundingBox( ::flixel::FlxCamera camera){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1389_getBoundingBox)
HXLINE(1390)		this->getScreenPosition(this->_point,camera);
HXLINE(1392)		{
HXLINE(1392)			 ::flixel::math::FlxRect _this = this->_rect;
HXDLIN(1392)			Float X = this->_point->x;
HXDLIN(1392)			Float Y = this->_point->y;
HXDLIN(1392)			Float Width = this->get_width();
HXDLIN(1392)			Float Height = this->get_height();
HXDLIN(1392)			_this->x = X;
HXDLIN(1392)			_this->y = Y;
HXDLIN(1392)			_this->width = Width;
HXDLIN(1392)			_this->height = Height;
            		}
HXLINE(1393)		this->_rect = camera->transformRect(this->_rect);
HXLINE(1395)		if (this->isPixelPerfectRender(camera)) {
HXLINE(1397)			 ::flixel::math::FlxRect _this1 = this->_rect;
HXDLIN(1397)			_this1->x = ( (Float)(::Math_obj::floor(_this1->x)) );
HXDLIN(1397)			_this1->y = ( (Float)(::Math_obj::floor(_this1->y)) );
HXDLIN(1397)			_this1->width = ( (Float)(::Math_obj::floor(_this1->width)) );
HXDLIN(1397)			_this1->height = ( (Float)(::Math_obj::floor(_this1->height)) );
            		}
HXLINE(1400)		return this->_rect;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,getBoundingBox,return )

 ::flixel::math::FlxRect FlxObject_obj::getRotatedBounds( ::flixel::math::FlxRect newRect){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1413_getRotatedBounds)
HXLINE(1414)		if (::hx::IsNull( newRect )) {
HXLINE(1415)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN(1415)			_this->x = ( (Float)(0) );
HXDLIN(1415)			_this->y = ( (Float)(0) );
HXDLIN(1415)			_this->width = ( (Float)(0) );
HXDLIN(1415)			_this->height = ( (Float)(0) );
HXDLIN(1415)			 ::flixel::math::FlxRect rect = _this;
HXDLIN(1415)			rect->_inPool = false;
HXDLIN(1415)			newRect = rect;
            		}
HXLINE(1417)		{
HXLINE(1417)			Float X = this->x;
HXDLIN(1417)			Float Y = this->y;
HXDLIN(1417)			Float Width = this->get_width();
HXDLIN(1417)			Float Height = this->get_height();
HXDLIN(1417)			newRect->x = X;
HXDLIN(1417)			newRect->y = Y;
HXDLIN(1417)			newRect->width = Width;
HXDLIN(1417)			newRect->height = Height;
            		}
HXLINE(1418)		return newRect->getRotatedBounds(this->angle,null(),newRect);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,getRotatedBounds,return )

::String FlxObject_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1426_toString)
HXLINE(1427)		 ::Dynamic value = this->x;
HXDLIN(1427)		 ::flixel::util::LabelValuePair _this = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN(1427)		_this->label = HX_("x",78,00,00,00);
HXDLIN(1427)		_this->value = value;
HXLINE(1428)		 ::Dynamic value1 = this->y;
HXDLIN(1428)		 ::flixel::util::LabelValuePair _this1 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN(1428)		_this1->label = HX_("y",79,00,00,00);
HXDLIN(1428)		_this1->value = value1;
HXLINE(1429)		 ::Dynamic value2 = this->get_width();
HXDLIN(1429)		 ::flixel::util::LabelValuePair _this2 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN(1429)		_this2->label = HX_("w",77,00,00,00);
HXDLIN(1429)		_this2->value = value2;
HXLINE(1430)		 ::Dynamic value3 = this->get_height();
HXDLIN(1430)		 ::flixel::util::LabelValuePair _this3 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN(1430)		_this3->label = HX_("h",68,00,00,00);
HXDLIN(1430)		_this3->value = value3;
HXLINE(1431)		 ::Dynamic value4 = this->visible;
HXDLIN(1431)		 ::flixel::util::LabelValuePair _this4 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN(1431)		_this4->label = HX_("visible",72,78,24,a3);
HXDLIN(1431)		_this4->value = value4;
HXLINE(1432)		 ::Dynamic value5 = this->velocity;
HXDLIN(1432)		 ::flixel::util::LabelValuePair _this5 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN(1432)		_this5->label = HX_("velocity",1d,02,fe,1e);
HXDLIN(1432)		_this5->value = value5;
HXLINE(1426)		return ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(6)->init(0,_this)->init(1,_this1)->init(2,_this2)->init(3,_this3)->init(4,_this4)->init(5,_this5));
            	}


Float FlxObject_obj::set_x(Float value){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1439_set_x)
HXDLIN(1439)		return (this->x = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_x,return )

Float FlxObject_obj::set_y(Float value){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1445_set_y)
HXDLIN(1445)		return (this->y = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_y,return )

Float FlxObject_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1459_set_width)
HXDLIN(1459)		return (this->width = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_width,return )

Float FlxObject_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1473_set_height)
HXDLIN(1473)		return (this->height = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_height,return )

Float FlxObject_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1479_get_width)
HXDLIN(1479)		return this->width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxObject_obj,get_width,return )

Float FlxObject_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1485_get_height)
HXDLIN(1485)		return this->height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxObject_obj,get_height,return )

bool FlxObject_obj::get_solid(){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1491_get_solid)
HXDLIN(1491)		return ((this->allowCollisions & 4369) > 0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxObject_obj,get_solid,return )

bool FlxObject_obj::set_solid(bool value){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1496_set_solid)
HXLINE(1497)		int _hx_tmp;
HXDLIN(1497)		if (value) {
HXLINE(1497)			_hx_tmp = 4369;
            		}
            		else {
HXLINE(1497)			_hx_tmp = 0;
            		}
HXDLIN(1497)		this->set_allowCollisions(_hx_tmp);
HXLINE(1498)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_solid,return )

Float FlxObject_obj::set_angle(Float value){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1504_set_angle)
HXDLIN(1504)		return (this->angle = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_angle,return )

bool FlxObject_obj::set_moves(bool value){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1510_set_moves)
HXDLIN(1510)		return (this->moves = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_moves,return )

bool FlxObject_obj::set_immovable(bool value){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1516_set_immovable)
HXDLIN(1516)		return (this->immovable = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_immovable,return )

bool FlxObject_obj::set_pixelPerfectRender(bool value){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1522_set_pixelPerfectRender)
HXDLIN(1522)		return ( (bool)((this->pixelPerfectRender = value)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_pixelPerfectRender,return )

int FlxObject_obj::set_allowCollisions(int value){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1528_set_allowCollisions)
HXDLIN(1528)		return (this->allowCollisions = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_allowCollisions,return )

bool FlxObject_obj::get_collisonXDrag(){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1534_get_collisonXDrag)
HXDLIN(1534)		return (this->collisionXDrag == 2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxObject_obj,get_collisonXDrag,return )

bool FlxObject_obj::set_collisonXDrag(bool value){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1539_set_collisonXDrag)
HXLINE(1540)		int _hx_tmp;
HXDLIN(1540)		if (value) {
HXLINE(1540)			_hx_tmp = 2;
            		}
            		else {
HXLINE(1540)			_hx_tmp = 0;
            		}
HXDLIN(1540)		this->collisionXDrag = _hx_tmp;
HXLINE(1541)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_collisonXDrag,return )

 ::flixel::path::FlxPath FlxObject_obj::set_path( ::flixel::path::FlxPath path){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_1566_set_path)
HXLINE(1567)		if (::hx::IsInstanceEq( this->path,path )) {
HXLINE(1568)			return path;
            		}
HXLINE(1570)		if (::hx::IsNotNull( this->path )) {
HXLINE(1571)			this->path->set_object(null());
            		}
HXLINE(1573)		if (::hx::IsNotNull( path )) {
HXLINE(1574)			path->set_object(::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1575)		return (this->path = path);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObject_obj,set_path,return )

bool FlxObject_obj::defaultPixelPerfectPosition;

Float FlxObject_obj::SEPARATE_BIAS;

bool FlxObject_obj::defaultMoves;

int FlxObject_obj::LEFT;

int FlxObject_obj::RIGHT;

int FlxObject_obj::UP;

int FlxObject_obj::DOWN;

int FlxObject_obj::NONE;

int FlxObject_obj::CEILING;

int FlxObject_obj::FLOOR;

int FlxObject_obj::WALL;

int FlxObject_obj::ANY;

bool FlxObject_obj::allowCollisionDrag(int type, ::flixel::FlxObject object1, ::flixel::FlxObject object2){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_170_allowCollisionDrag)
HXDLIN( 170)		bool _hx_tmp;
HXDLIN( 170)		if (object2->active) {
HXDLIN( 170)			_hx_tmp = object2->moves;
            		}
            		else {
HXDLIN( 170)			_hx_tmp = false;
            		}
HXDLIN( 170)		if (_hx_tmp) {
HXDLIN( 170)			switch((int)(type)){
            				case (int)0: {
HXLINE( 172)					return false;
            				}
            				break;
            				case (int)1: {
HXLINE( 173)					return true;
            				}
            				break;
            				case (int)2: {
HXLINE( 174)					return object2->immovable;
            				}
            				break;
            				case (int)3: {
HXLINE( 175)					if (!(object2->immovable)) {
HXLINE( 175)						return (object2->mass > object1->mass);
            					}
            					else {
HXLINE( 175)						return true;
            					}
            				}
            				break;
            			}
            		}
            		else {
HXDLIN( 170)			return false;
            		}
HXDLIN( 170)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxObject_obj,allowCollisionDrag,return )

bool FlxObject_obj::processCheckTilemap( ::flixel::FlxObject object1, ::flixel::FlxObject object2, ::Dynamic func, ::flixel::math::FlxBasePoint position,::hx::Null< bool >  __o_isCollision){
            		bool isCollision = __o_isCollision.Default(true);
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_194_processCheckTilemap)
HXLINE( 196)		bool _hx_tmp;
HXDLIN( 196)		bool _hx_tmp1;
HXDLIN( 196)		if (isCollision) {
HXLINE( 196)			_hx_tmp1 = object1->immovable;
            		}
            		else {
HXLINE( 196)			_hx_tmp1 = false;
            		}
HXDLIN( 196)		if (_hx_tmp1) {
HXLINE( 196)			_hx_tmp = object2->immovable;
            		}
            		else {
HXLINE( 196)			_hx_tmp = false;
            		}
HXDLIN( 196)		if (_hx_tmp) {
HXLINE( 197)			return false;
            		}
HXLINE( 200)		if ((object1->flixelType == 3)) {
            			HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxObject,object2, ::Dynamic,func,bool,isCollision, ::flixel::math::FlxBasePoint,position) HXARGC(2)
            			bool _hx_run( ::flixel::FlxObject tile, ::flixel::FlxObject _){
            				HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_207_processCheckTilemap)
HXLINE( 207)				return ::flixel::FlxObject_obj::processCheckTilemap(tile,object2,func,position,isCollision);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 202)			 ::flixel::tile::FlxBaseTilemap tilemap = ( ( ::flixel::tile::FlxBaseTilemap)(object1) );
HXLINE( 204)			 ::Dynamic recurseProcess =  ::Dynamic(new _hx_Closure_0(object2,func,isCollision,position));
HXLINE( 209)			return tilemap->overlapsWithCallback(object2,recurseProcess,false,position);
            		}
            		else {
HXLINE( 211)			if ((object2->flixelType == 3)) {
            				HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,func,bool,isCollision, ::flixel::math::FlxBasePoint,position, ::flixel::FlxObject,object1) HXARGC(2)
            				bool _hx_run( ::flixel::FlxObject tile, ::flixel::FlxObject _){
            					HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_218_processCheckTilemap)
HXLINE( 218)					return ::flixel::FlxObject_obj::processCheckTilemap(object1,tile,func,position,isCollision);
            				}
            				HX_END_LOCAL_FUNC2(return)

HXLINE( 213)				 ::flixel::tile::FlxBaseTilemap tilemap1 = ( ( ::flixel::tile::FlxBaseTilemap)(object2) );
HXLINE( 215)				 ::Dynamic recurseProcess1 =  ::Dynamic(new _hx_Closure_1(func,isCollision,position,object1));
HXLINE( 220)				return tilemap1->overlapsWithCallback(object1,recurseProcess1,false,position);
            			}
            		}
HXLINE( 223)		return ( (bool)(func(object1,object2)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxObject_obj,processCheckTilemap,return )

bool FlxObject_obj::separate( ::flixel::FlxObject object1, ::flixel::FlxObject object2){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_233_separate)
HXLINE( 234)		bool separatedX = ::flixel::FlxObject_obj::separateX(object1,object2);
HXLINE( 235)		bool separatedY = ::flixel::FlxObject_obj::separateY(object1,object2);
HXLINE( 236)		if (!(separatedX)) {
HXLINE( 236)			return separatedY;
            		}
            		else {
HXLINE( 236)			return true;
            		}
HXDLIN( 236)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,separate,return )

bool FlxObject_obj::separateX( ::flixel::FlxObject object1, ::flixel::FlxObject object2){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_261_separateX)
HXDLIN( 261)		return ::flixel::FlxObject_obj::processCheckTilemap(object1,object2,::flixel::FlxObject_obj::separateXHelper_dyn(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,separateX,return )

bool FlxObject_obj::separateY( ::flixel::FlxObject object1, ::flixel::FlxObject object2){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_272_separateY)
HXDLIN( 272)		return ::flixel::FlxObject_obj::processCheckTilemap(object1,object2,::flixel::FlxObject_obj::separateYHelper_dyn(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,separateY,return )

bool FlxObject_obj::separateXHelper( ::flixel::FlxObject object1, ::flixel::FlxObject object2){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_279_separateXHelper)
HXLINE( 280)		Float overlap = ::flixel::FlxObject_obj::computeOverlapX(object1,object2,null());
HXLINE( 282)		if ((overlap != 0)) {
HXLINE( 284)			Float delta1 = (object1->x - object1->last->x);
HXLINE( 285)			Float delta2 = (object2->x - object2->last->x);
HXLINE( 286)			Float vel1 = object1->velocity->x;
HXLINE( 287)			Float vel2 = object2->velocity->x;
HXLINE( 289)			bool _hx_tmp;
HXDLIN( 289)			if (!(object1->immovable)) {
HXLINE( 289)				_hx_tmp = !(object2->immovable);
            			}
            			else {
HXLINE( 289)				_hx_tmp = false;
            			}
HXDLIN( 289)			if (_hx_tmp) {
HXLINE( 294)				object1->set_x((object1->x - (overlap * ((Float)0.5))));
HXLINE( 295)				object2->set_x((object2->x + (overlap * ((Float)0.5))));
HXLINE( 297)				Float mass1 = object1->mass;
HXLINE( 298)				Float mass2 = object2->mass;
HXLINE( 299)				Float momentum = ((mass1 * vel1) + (mass2 * vel2));
HXLINE( 300)				object1->velocity->set_x(((momentum + ((object1->elasticity * mass2) * (vel2 - vel1))) / (mass1 + mass2)));
HXLINE( 301)				object2->velocity->set_x(((momentum + ((object2->elasticity * mass1) * (vel1 - vel2))) / (mass1 + mass2)));
            			}
            			else {
HXLINE( 304)				if (!(object1->immovable)) {
HXLINE( 306)					object1->set_x((object1->x - overlap));
HXLINE( 307)					object1->velocity->set_x((vel2 - (vel1 * object1->elasticity)));
            				}
            				else {
HXLINE( 309)					if (!(object2->immovable)) {
HXLINE( 311)						object2->set_x((object2->x + overlap));
HXLINE( 312)						object2->velocity->set_x((vel1 - (vel2 * object2->elasticity)));
            					}
            				}
            			}
HXLINE( 316)			bool _hx_tmp1;
HXDLIN( 316)			if (::flixel::FlxObject_obj::allowCollisionDrag(object1->collisionYDrag,object1,object2)) {
HXLINE( 316)				_hx_tmp1 = (delta1 > delta2);
            			}
            			else {
HXLINE( 316)				_hx_tmp1 = false;
            			}
HXDLIN( 316)			if (_hx_tmp1) {
HXLINE( 317)				object1->set_y((object1->y + (object2->y - object2->last->y)));
            			}
            			else {
HXLINE( 318)				bool _hx_tmp2;
HXDLIN( 318)				if (::flixel::FlxObject_obj::allowCollisionDrag(object2->collisionYDrag,object2,object1)) {
HXLINE( 318)					_hx_tmp2 = (delta2 > delta1);
            				}
            				else {
HXLINE( 318)					_hx_tmp2 = false;
            				}
HXDLIN( 318)				if (_hx_tmp2) {
HXLINE( 319)					object2->set_y((object2->y + (object1->y - object1->last->y)));
            				}
            			}
HXLINE( 321)			return true;
            		}
HXLINE( 324)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,separateXHelper,return )

bool FlxObject_obj::separateYHelper( ::flixel::FlxObject object1, ::flixel::FlxObject object2){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_331_separateYHelper)
HXLINE( 332)		Float overlap = ::flixel::FlxObject_obj::computeOverlapY(object1,object2,null());
HXLINE( 334)		if ((overlap != 0)) {
HXLINE( 336)			Float delta1 = (object1->y - object1->last->y);
HXLINE( 337)			Float delta2 = (object2->y - object2->last->y);
HXLINE( 338)			Float vel1 = object1->velocity->y;
HXLINE( 339)			Float vel2 = object2->velocity->y;
HXLINE( 341)			bool _hx_tmp;
HXDLIN( 341)			if (!(object1->immovable)) {
HXLINE( 341)				_hx_tmp = !(object2->immovable);
            			}
            			else {
HXLINE( 341)				_hx_tmp = false;
            			}
HXDLIN( 341)			if (_hx_tmp) {
HXLINE( 346)				object1->set_y((object1->y - (overlap / ( (Float)(2) ))));
HXLINE( 347)				object2->set_y((object2->y + (overlap / ( (Float)(2) ))));
HXLINE( 349)				Float mass1 = object1->mass;
HXLINE( 350)				Float mass2 = object2->mass;
HXLINE( 351)				Float momentum = ((mass1 * vel1) + (mass2 * vel2));
HXLINE( 352)				Float newVel1 = ((momentum + ((object1->elasticity * mass2) * (vel2 - vel1))) / (mass1 + mass2));
HXLINE( 353)				Float newVel2 = ((momentum + ((object2->elasticity * mass1) * (vel1 - vel2))) / (mass1 + mass2));
HXLINE( 354)				object1->velocity->set_y(newVel1);
HXLINE( 355)				object2->velocity->set_y(newVel2);
            			}
            			else {
HXLINE( 358)				if (!(object1->immovable)) {
HXLINE( 360)					object1->set_y((object1->y - overlap));
HXLINE( 361)					object1->velocity->set_y((vel2 - (vel1 * object1->elasticity)));
            				}
            				else {
HXLINE( 363)					if (!(object2->immovable)) {
HXLINE( 365)						object2->set_y((object2->y + overlap));
HXLINE( 366)						object2->velocity->set_y((vel1 - (vel2 * object2->elasticity)));
            					}
            				}
            			}
HXLINE( 370)			bool _hx_tmp1;
HXDLIN( 370)			if (::flixel::FlxObject_obj::allowCollisionDrag(object1->collisionXDrag,object1,object2)) {
HXLINE( 370)				_hx_tmp1 = (delta1 > delta2);
            			}
            			else {
HXLINE( 370)				_hx_tmp1 = false;
            			}
HXDLIN( 370)			if (_hx_tmp1) {
HXLINE( 371)				object1->set_x((object1->x + (object2->x - object2->last->x)));
            			}
            			else {
HXLINE( 372)				bool _hx_tmp2;
HXDLIN( 372)				if (::flixel::FlxObject_obj::allowCollisionDrag(object2->collisionXDrag,object2,object1)) {
HXLINE( 372)					_hx_tmp2 = (delta2 > delta1);
            				}
            				else {
HXLINE( 372)					_hx_tmp2 = false;
            				}
HXDLIN( 372)				if (_hx_tmp2) {
HXLINE( 373)					object2->set_x((object2->x + (object1->x - object1->last->x)));
            				}
            			}
HXLINE( 375)			return true;
            		}
HXLINE( 378)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,separateYHelper,return )

void FlxObject_obj::legacySeparateX( ::flixel::FlxObject object1, ::flixel::FlxObject object2,Float overlap){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_386_legacySeparateX)
HXLINE( 387)		Float vel1 = object1->velocity->x;
HXLINE( 388)		Float vel2 = object2->velocity->x;
HXLINE( 389)		Float mass1 = object1->mass;
HXLINE( 390)		Float mass2 = object2->mass;
HXLINE( 391)		object1->set_x((object1->x - (overlap * ((Float)0.5))));
HXLINE( 392)		object2->set_x((object2->x + (overlap * ((Float)0.5))));
HXLINE( 394)		int newVel1;
HXDLIN( 394)		if ((vel2 > 0)) {
HXLINE( 394)			newVel1 = 1;
            		}
            		else {
HXLINE( 394)			newVel1 = -1;
            		}
HXDLIN( 394)		Float newVel11 = (::Math_obj::sqrt((((vel2 * vel2) * mass2) / mass1)) * ( (Float)(newVel1) ));
HXLINE( 395)		int newVel2;
HXDLIN( 395)		if ((vel1 > 0)) {
HXLINE( 395)			newVel2 = 1;
            		}
            		else {
HXLINE( 395)			newVel2 = -1;
            		}
HXDLIN( 395)		Float newVel21 = (::Math_obj::sqrt((((vel1 * vel1) * mass1) / mass2)) * ( (Float)(newVel2) ));
HXLINE( 396)		Float average = ((newVel11 + newVel21) * ((Float)0.5));
HXLINE( 397)		newVel11 = (newVel11 - average);
HXLINE( 398)		newVel21 = (newVel21 - average);
HXLINE( 399)		object1->velocity->set_x((average + (newVel11 * object1->elasticity)));
HXLINE( 400)		object2->velocity->set_x((average + (newVel21 * object2->elasticity)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxObject_obj,legacySeparateX,(void))

void FlxObject_obj::legacySeparateY( ::flixel::FlxObject object1, ::flixel::FlxObject object2,Float overlap){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_408_legacySeparateY)
HXLINE( 409)		Float vel1 = object1->velocity->y;
HXLINE( 410)		Float vel2 = object2->velocity->y;
HXLINE( 411)		Float mass1 = object1->mass;
HXLINE( 412)		Float mass2 = object2->mass;
HXLINE( 413)		object1->set_y((object1->y - (overlap * ((Float)0.5))));
HXLINE( 414)		object2->set_y((object2->y + (overlap * ((Float)0.5))));
HXLINE( 416)		int newVel1;
HXDLIN( 416)		if ((vel2 > 0)) {
HXLINE( 416)			newVel1 = 1;
            		}
            		else {
HXLINE( 416)			newVel1 = -1;
            		}
HXDLIN( 416)		Float newVel11 = (::Math_obj::sqrt((((vel2 * vel2) * mass2) / mass1)) * ( (Float)(newVel1) ));
HXLINE( 417)		int newVel2;
HXDLIN( 417)		if ((vel1 > 0)) {
HXLINE( 417)			newVel2 = 1;
            		}
            		else {
HXLINE( 417)			newVel2 = -1;
            		}
HXDLIN( 417)		Float newVel21 = (::Math_obj::sqrt((((vel1 * vel1) * mass1) / mass2)) * ( (Float)(newVel2) ));
HXLINE( 418)		Float average = ((newVel11 + newVel21) * ((Float)0.5));
HXLINE( 419)		newVel11 = (newVel11 - average);
HXLINE( 420)		newVel21 = (newVel21 - average);
HXLINE( 421)		object1->velocity->set_y((average + (newVel11 * object1->elasticity)));
HXLINE( 422)		object2->velocity->set_y((average + (newVel21 * object2->elasticity)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxObject_obj,legacySeparateY,(void))

bool FlxObject_obj::updateTouchingFlags( ::flixel::FlxObject object1, ::flixel::FlxObject object2){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		bool _hx_run( ::flixel::FlxObject object1, ::flixel::FlxObject object2){
            			HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_434_updateTouchingFlags)
HXLINE( 435)			bool touchingX = ::flixel::FlxObject_obj::updateTouchingFlagsXHelper(object1,object2);
HXLINE( 436)			bool touchingY = ::flixel::FlxObject_obj::updateTouchingFlagsYHelper(object1,object2);
HXLINE( 437)			if (!(touchingX)) {
HXLINE( 437)				return touchingY;
            			}
            			else {
HXLINE( 437)				return true;
            			}
HXDLIN( 437)			return false;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_432_updateTouchingFlags)
HXLINE( 433)		 ::Dynamic helper =  ::Dynamic(new _hx_Closure_0());
HXLINE( 439)		return ::flixel::FlxObject_obj::processCheckTilemap(object1,object2,helper,null(),false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,updateTouchingFlags,return )

bool FlxObject_obj::updateTouchingFlagsX( ::flixel::FlxObject object1, ::flixel::FlxObject object2){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_450_updateTouchingFlagsX)
HXDLIN( 450)		return ::flixel::FlxObject_obj::processCheckTilemap(object1,object2,::flixel::FlxObject_obj::updateTouchingFlagsXHelper_dyn(),null(),false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,updateTouchingFlagsX,return )

bool FlxObject_obj::updateTouchingFlagsXHelper( ::flixel::FlxObject object1, ::flixel::FlxObject object2){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_456_updateTouchingFlagsXHelper)
HXDLIN( 456)		return (::flixel::FlxObject_obj::computeOverlapX(object1,object2,false) != 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,updateTouchingFlagsXHelper,return )

bool FlxObject_obj::updateTouchingFlagsY( ::flixel::FlxObject object1, ::flixel::FlxObject object2){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_467_updateTouchingFlagsY)
HXDLIN( 467)		return ::flixel::FlxObject_obj::processCheckTilemap(object1,object2,::flixel::FlxObject_obj::updateTouchingFlagsYHelper_dyn(),null(),false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,updateTouchingFlagsY,return )

bool FlxObject_obj::updateTouchingFlagsYHelper( ::flixel::FlxObject object1, ::flixel::FlxObject object2){
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_473_updateTouchingFlagsYHelper)
HXDLIN( 473)		return (::flixel::FlxObject_obj::computeOverlapY(object1,object2,false) != 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxObject_obj,updateTouchingFlagsYHelper,return )

Float FlxObject_obj::computeOverlapX( ::flixel::FlxObject object1, ::flixel::FlxObject object2,::hx::Null< bool >  __o_checkMaxOverlap){
            		bool checkMaxOverlap = __o_checkMaxOverlap.Default(true);
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_482_computeOverlapX)
HXLINE( 483)		Float overlap = ( (Float)(0) );
HXLINE( 485)		Float delta1 = (object1->x - object1->last->x);
HXLINE( 486)		Float delta2 = (object2->x - object2->last->x);
HXLINE( 488)		if ((delta1 != delta2)) {
HXLINE( 491)			Float delta1Abs;
HXDLIN( 491)			if ((delta1 > 0)) {
HXLINE( 491)				delta1Abs = delta1;
            			}
            			else {
HXLINE( 491)				delta1Abs = -(delta1);
            			}
HXLINE( 492)			Float delta2Abs;
HXDLIN( 492)			if ((delta2 > 0)) {
HXLINE( 492)				delta2Abs = delta2;
            			}
            			else {
HXLINE( 492)				delta2Abs = -(delta2);
            			}
HXLINE( 494)			Float X;
HXDLIN( 494)			if ((delta1 > 0)) {
HXLINE( 494)				X = delta1;
            			}
            			else {
HXLINE( 494)				X = ( (Float)(0) );
            			}
HXDLIN( 494)			Float X1 = (object1->x - X);
HXDLIN( 494)			Float Y = object1->last->y;
HXDLIN( 494)			Float Width = (object1->get_width() + delta1Abs);
HXDLIN( 494)			Float Height = object1->get_height();
HXDLIN( 494)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 494)			_this->x = X1;
HXDLIN( 494)			_this->y = Y;
HXDLIN( 494)			_this->width = Width;
HXDLIN( 494)			_this->height = Height;
HXDLIN( 494)			 ::flixel::math::FlxRect rect = _this;
HXDLIN( 494)			rect->_inPool = false;
HXDLIN( 494)			 ::flixel::math::FlxRect rect1 = rect;
HXLINE( 495)			Float X2;
HXDLIN( 495)			if ((delta2 > 0)) {
HXLINE( 495)				X2 = delta2;
            			}
            			else {
HXLINE( 495)				X2 = ( (Float)(0) );
            			}
HXDLIN( 495)			Float X3 = (object2->x - X2);
HXDLIN( 495)			Float Y1 = object2->last->y;
HXDLIN( 495)			Float Width1 = (object2->get_width() + delta2Abs);
HXDLIN( 495)			Float Height1 = object2->get_height();
HXDLIN( 495)			 ::flixel::math::FlxRect _this1 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 495)			_this1->x = X3;
HXDLIN( 495)			_this1->y = Y1;
HXDLIN( 495)			_this1->width = Width1;
HXDLIN( 495)			_this1->height = Height1;
HXDLIN( 495)			 ::flixel::math::FlxRect rect2 = _this1;
HXDLIN( 495)			rect2->_inPool = false;
HXDLIN( 495)			 ::flixel::math::FlxRect rect21 = rect2;
HXLINE( 497)			bool result;
HXDLIN( 497)			bool result1;
HXDLIN( 497)			bool result2;
HXDLIN( 497)			if (((rect21->x + rect21->width) > rect1->x)) {
HXLINE( 497)				result2 = (rect21->x < (rect1->x + rect1->width));
            			}
            			else {
HXLINE( 497)				result2 = false;
            			}
HXDLIN( 497)			if (result2) {
HXLINE( 497)				result1 = ((rect21->y + rect21->height) > rect1->y);
            			}
            			else {
HXLINE( 497)				result1 = false;
            			}
HXDLIN( 497)			if (result1) {
HXLINE( 497)				result = (rect21->y < (rect1->y + rect1->height));
            			}
            			else {
HXLINE( 497)				result = false;
            			}
HXDLIN( 497)			if (rect21->_weak) {
HXLINE( 497)				if (!(rect21->_inPool)) {
HXLINE( 497)					rect21->_inPool = true;
HXDLIN( 497)					rect21->_weak = false;
HXDLIN( 497)					::flixel::math::FlxRect_obj::_pool->putUnsafe(rect21);
            				}
            			}
HXDLIN( 497)			if (result) {
HXLINE( 499)				Float maxOverlap;
HXDLIN( 499)				if (checkMaxOverlap) {
HXLINE( 499)					maxOverlap = ((delta1Abs + delta2Abs) + ::flixel::FlxObject_obj::SEPARATE_BIAS);
            				}
            				else {
HXLINE( 499)					maxOverlap = ( (Float)(0) );
            				}
HXLINE( 507)				if ((delta1 > delta2)) {
HXLINE( 509)					Float object11 = object1->x;
HXDLIN( 509)					Float overlap1 = (object11 + object1->get_width());
HXDLIN( 509)					overlap = (overlap1 - object2->x);
HXLINE( 510)					bool _hx_tmp;
HXDLIN( 510)					bool _hx_tmp1;
HXDLIN( 510)					bool _hx_tmp2;
HXDLIN( 510)					if (checkMaxOverlap) {
HXLINE( 510)						_hx_tmp2 = (overlap > maxOverlap);
            					}
            					else {
HXLINE( 510)						_hx_tmp2 = false;
            					}
HXDLIN( 510)					if (!(_hx_tmp2)) {
HXLINE( 511)						int dir = 16;
HXLINE( 510)						_hx_tmp1 = ((object1->allowCollisions & dir) != dir);
            					}
            					else {
HXLINE( 510)						_hx_tmp1 = true;
            					}
HXDLIN( 510)					if (!(_hx_tmp1)) {
HXLINE( 512)						int dir1 = 1;
HXLINE( 510)						_hx_tmp = ((object2->allowCollisions & dir1) != dir1);
            					}
            					else {
HXLINE( 510)						_hx_tmp = true;
            					}
HXDLIN( 510)					if (_hx_tmp) {
HXLINE( 514)						overlap = ( (Float)(0) );
            					}
            					else {
HXLINE( 518)						 ::flixel::FlxObject object12 = object1;
HXDLIN( 518)						object12->touching = (object12->touching | 16);
HXLINE( 519)						 ::flixel::FlxObject object21 = object2;
HXDLIN( 519)						object21->touching = (object21->touching | 1);
            					}
            				}
            				else {
HXLINE( 522)					if ((delta1 < delta2)) {
HXLINE( 524)						Float object13 = object1->x;
HXDLIN( 524)						Float overlap2 = (object13 - object2->get_width());
HXDLIN( 524)						overlap = (overlap2 - object2->x);
HXLINE( 525)						bool _hx_tmp3;
HXDLIN( 525)						bool _hx_tmp4;
HXDLIN( 525)						bool _hx_tmp5;
HXDLIN( 525)						if (checkMaxOverlap) {
HXLINE( 525)							_hx_tmp5 = (-(overlap) > maxOverlap);
            						}
            						else {
HXLINE( 525)							_hx_tmp5 = false;
            						}
HXDLIN( 525)						if (!(_hx_tmp5)) {
HXLINE( 526)							int dir2 = 1;
HXLINE( 525)							_hx_tmp4 = ((object1->allowCollisions & dir2) != dir2);
            						}
            						else {
HXLINE( 525)							_hx_tmp4 = true;
            						}
HXDLIN( 525)						if (!(_hx_tmp4)) {
HXLINE( 527)							int dir3 = 16;
HXLINE( 525)							_hx_tmp3 = ((object2->allowCollisions & dir3) != dir3);
            						}
            						else {
HXLINE( 525)							_hx_tmp3 = true;
            						}
HXDLIN( 525)						if (_hx_tmp3) {
HXLINE( 529)							overlap = ( (Float)(0) );
            						}
            						else {
HXLINE( 533)							 ::flixel::FlxObject object14 = object1;
HXDLIN( 533)							object14->touching = (object14->touching | 1);
HXLINE( 534)							 ::flixel::FlxObject object22 = object2;
HXDLIN( 534)							object22->touching = (object22->touching | 16);
            						}
            					}
            				}
            			}
HXLINE( 539)			if (!(rect1->_inPool)) {
HXLINE( 539)				rect1->_inPool = true;
HXDLIN( 539)				rect1->_weak = false;
HXDLIN( 539)				::flixel::math::FlxRect_obj::_pool->putUnsafe(rect1);
            			}
HXLINE( 540)			if (!(rect21->_inPool)) {
HXLINE( 540)				rect21->_inPool = true;
HXDLIN( 540)				rect21->_weak = false;
HXDLIN( 540)				::flixel::math::FlxRect_obj::_pool->putUnsafe(rect21);
            			}
            		}
HXLINE( 543)		return overlap;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxObject_obj,computeOverlapX,return )

Float FlxObject_obj::computeOverlapY( ::flixel::FlxObject object1, ::flixel::FlxObject object2,::hx::Null< bool >  __o_checkMaxOverlap){
            		bool checkMaxOverlap = __o_checkMaxOverlap.Default(true);
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_552_computeOverlapY)
HXLINE( 553)		Float overlap = ( (Float)(0) );
HXLINE( 555)		Float delta1 = (object1->y - object1->last->y);
HXLINE( 556)		Float delta2 = (object2->y - object2->last->y);
HXLINE( 558)		if ((delta1 != delta2)) {
HXLINE( 561)			Float delta1Abs;
HXDLIN( 561)			if ((delta1 > 0)) {
HXLINE( 561)				delta1Abs = delta1;
            			}
            			else {
HXLINE( 561)				delta1Abs = -(delta1);
            			}
HXLINE( 562)			Float delta2Abs;
HXDLIN( 562)			if ((delta2 > 0)) {
HXLINE( 562)				delta2Abs = delta2;
            			}
            			else {
HXLINE( 562)				delta2Abs = -(delta2);
            			}
HXLINE( 564)			Float X = object1->last->x;
HXDLIN( 564)			Float Y;
HXDLIN( 564)			if ((delta1 > 0)) {
HXLINE( 564)				Y = delta1;
            			}
            			else {
HXLINE( 564)				Y = ( (Float)(0) );
            			}
HXDLIN( 564)			Float Y1 = (object1->y - Y);
HXDLIN( 564)			Float Width = object1->get_width();
HXDLIN( 564)			Float Height = (object1->get_height() + delta1Abs);
HXDLIN( 564)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 564)			_this->x = X;
HXDLIN( 564)			_this->y = Y1;
HXDLIN( 564)			_this->width = Width;
HXDLIN( 564)			_this->height = Height;
HXDLIN( 564)			 ::flixel::math::FlxRect rect = _this;
HXDLIN( 564)			rect->_inPool = false;
HXDLIN( 564)			 ::flixel::math::FlxRect rect1 = rect;
HXLINE( 565)			Float X1 = object2->last->x;
HXDLIN( 565)			Float Y2;
HXDLIN( 565)			if ((delta2 > 0)) {
HXLINE( 565)				Y2 = delta2;
            			}
            			else {
HXLINE( 565)				Y2 = ( (Float)(0) );
            			}
HXDLIN( 565)			Float Y3 = (object2->y - Y2);
HXDLIN( 565)			Float Width1 = object2->get_width();
HXDLIN( 565)			Float Height1 = (object2->get_height() + delta2Abs);
HXDLIN( 565)			 ::flixel::math::FlxRect _this1 = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 565)			_this1->x = X1;
HXDLIN( 565)			_this1->y = Y3;
HXDLIN( 565)			_this1->width = Width1;
HXDLIN( 565)			_this1->height = Height1;
HXDLIN( 565)			 ::flixel::math::FlxRect rect2 = _this1;
HXDLIN( 565)			rect2->_inPool = false;
HXDLIN( 565)			 ::flixel::math::FlxRect rect21 = rect2;
HXLINE( 567)			bool result;
HXDLIN( 567)			bool result1;
HXDLIN( 567)			bool result2;
HXDLIN( 567)			if (((rect21->x + rect21->width) > rect1->x)) {
HXLINE( 567)				result2 = (rect21->x < (rect1->x + rect1->width));
            			}
            			else {
HXLINE( 567)				result2 = false;
            			}
HXDLIN( 567)			if (result2) {
HXLINE( 567)				result1 = ((rect21->y + rect21->height) > rect1->y);
            			}
            			else {
HXLINE( 567)				result1 = false;
            			}
HXDLIN( 567)			if (result1) {
HXLINE( 567)				result = (rect21->y < (rect1->y + rect1->height));
            			}
            			else {
HXLINE( 567)				result = false;
            			}
HXDLIN( 567)			if (rect21->_weak) {
HXLINE( 567)				if (!(rect21->_inPool)) {
HXLINE( 567)					rect21->_inPool = true;
HXDLIN( 567)					rect21->_weak = false;
HXDLIN( 567)					::flixel::math::FlxRect_obj::_pool->putUnsafe(rect21);
            				}
            			}
HXDLIN( 567)			if (result) {
HXLINE( 569)				Float maxOverlap;
HXDLIN( 569)				if (checkMaxOverlap) {
HXLINE( 569)					maxOverlap = ((delta1Abs + delta2Abs) + ::flixel::FlxObject_obj::SEPARATE_BIAS);
            				}
            				else {
HXLINE( 569)					maxOverlap = ( (Float)(0) );
            				}
HXLINE( 577)				if ((delta1 > delta2)) {
HXLINE( 579)					Float object11 = object1->y;
HXDLIN( 579)					Float overlap1 = (object11 + object1->get_height());
HXDLIN( 579)					overlap = (overlap1 - object2->y);
HXLINE( 580)					bool _hx_tmp;
HXDLIN( 580)					bool _hx_tmp1;
HXDLIN( 580)					bool _hx_tmp2;
HXDLIN( 580)					if (checkMaxOverlap) {
HXLINE( 580)						_hx_tmp2 = (overlap > maxOverlap);
            					}
            					else {
HXLINE( 580)						_hx_tmp2 = false;
            					}
HXDLIN( 580)					if (!(_hx_tmp2)) {
HXLINE( 581)						int dir = 4096;
HXLINE( 580)						_hx_tmp1 = ((object1->allowCollisions & dir) != dir);
            					}
            					else {
HXLINE( 580)						_hx_tmp1 = true;
            					}
HXDLIN( 580)					if (!(_hx_tmp1)) {
HXLINE( 582)						int dir1 = 256;
HXLINE( 580)						_hx_tmp = ((object2->allowCollisions & dir1) != dir1);
            					}
            					else {
HXLINE( 580)						_hx_tmp = true;
            					}
HXDLIN( 580)					if (_hx_tmp) {
HXLINE( 584)						overlap = ( (Float)(0) );
            					}
            					else {
HXLINE( 588)						 ::flixel::FlxObject object12 = object1;
HXDLIN( 588)						object12->touching = (object12->touching | 4096);
HXLINE( 589)						 ::flixel::FlxObject object21 = object2;
HXDLIN( 589)						object21->touching = (object21->touching | 256);
            					}
            				}
            				else {
HXLINE( 592)					if ((delta1 < delta2)) {
HXLINE( 594)						Float object13 = object1->y;
HXDLIN( 594)						Float overlap2 = (object13 - object2->get_height());
HXDLIN( 594)						overlap = (overlap2 - object2->y);
HXLINE( 595)						bool _hx_tmp3;
HXDLIN( 595)						bool _hx_tmp4;
HXDLIN( 595)						bool _hx_tmp5;
HXDLIN( 595)						if (checkMaxOverlap) {
HXLINE( 595)							_hx_tmp5 = (-(overlap) > maxOverlap);
            						}
            						else {
HXLINE( 595)							_hx_tmp5 = false;
            						}
HXDLIN( 595)						if (!(_hx_tmp5)) {
HXLINE( 596)							int dir2 = 256;
HXLINE( 595)							_hx_tmp4 = ((object1->allowCollisions & dir2) != dir2);
            						}
            						else {
HXLINE( 595)							_hx_tmp4 = true;
            						}
HXDLIN( 595)						if (!(_hx_tmp4)) {
HXLINE( 597)							int dir3 = 4096;
HXLINE( 595)							_hx_tmp3 = ((object2->allowCollisions & dir3) != dir3);
            						}
            						else {
HXLINE( 595)							_hx_tmp3 = true;
            						}
HXDLIN( 595)						if (_hx_tmp3) {
HXLINE( 599)							overlap = ( (Float)(0) );
            						}
            						else {
HXLINE( 603)							 ::flixel::FlxObject object14 = object1;
HXDLIN( 603)							object14->touching = (object14->touching | 256);
HXLINE( 604)							 ::flixel::FlxObject object22 = object2;
HXDLIN( 604)							object22->touching = (object22->touching | 4096);
            						}
            					}
            				}
            			}
HXLINE( 609)			if (!(rect1->_inPool)) {
HXLINE( 609)				rect1->_inPool = true;
HXDLIN( 609)				rect1->_weak = false;
HXDLIN( 609)				::flixel::math::FlxRect_obj::_pool->putUnsafe(rect1);
            			}
HXLINE( 610)			if (!(rect21->_inPool)) {
HXLINE( 610)				rect21->_inPool = true;
HXDLIN( 610)				rect21->_weak = false;
HXDLIN( 610)				::flixel::math::FlxRect_obj::_pool->putUnsafe(rect21);
            			}
            		}
HXLINE( 613)		return overlap;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxObject_obj,computeOverlapY,return )


::hx::ObjectPtr< FlxObject_obj > FlxObject_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_width,::hx::Null< Float >  __o_height) {
	::hx::ObjectPtr< FlxObject_obj > __this = new FlxObject_obj();
	__this->__construct(__o_x,__o_y,__o_width,__o_height);
	return __this;
}

::hx::ObjectPtr< FlxObject_obj > FlxObject_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_width,::hx::Null< Float >  __o_height) {
	FlxObject_obj *__this = (FlxObject_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxObject_obj), true, "flixel.FlxObject"));
	*(void **)__this = FlxObject_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_width,__o_height);
	return __this;
}

FlxObject_obj::FlxObject_obj()
{
}

void FlxObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxObject);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(pixelPerfectRender,"pixelPerfectRender");
	HX_MARK_MEMBER_NAME(pixelPerfectPosition,"pixelPerfectPosition");
	HX_MARK_MEMBER_NAME(angle,"angle");
	HX_MARK_MEMBER_NAME(moves,"moves");
	HX_MARK_MEMBER_NAME(immovable,"immovable");
	HX_MARK_MEMBER_NAME(scrollFactor,"scrollFactor");
	HX_MARK_MEMBER_NAME(velocity,"velocity");
	HX_MARK_MEMBER_NAME(acceleration,"acceleration");
	HX_MARK_MEMBER_NAME(drag,"drag");
	HX_MARK_MEMBER_NAME(maxVelocity,"maxVelocity");
	HX_MARK_MEMBER_NAME(last,"last");
	HX_MARK_MEMBER_NAME(mass,"mass");
	HX_MARK_MEMBER_NAME(elasticity,"elasticity");
	HX_MARK_MEMBER_NAME(angularVelocity,"angularVelocity");
	HX_MARK_MEMBER_NAME(angularAcceleration,"angularAcceleration");
	HX_MARK_MEMBER_NAME(angularDrag,"angularDrag");
	HX_MARK_MEMBER_NAME(maxAngular,"maxAngular");
	HX_MARK_MEMBER_NAME(touching,"touching");
	HX_MARK_MEMBER_NAME(wasTouching,"wasTouching");
	HX_MARK_MEMBER_NAME(allowCollisions,"allowCollisions");
	HX_MARK_MEMBER_NAME(collisionXDrag,"collisionXDrag");
	HX_MARK_MEMBER_NAME(collisionYDrag,"collisionYDrag");
	HX_MARK_MEMBER_NAME(path,"path");
	HX_MARK_MEMBER_NAME(_point,"_point");
	HX_MARK_MEMBER_NAME(_rect,"_rect");
	 ::flixel::FlxBasic_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(pixelPerfectRender,"pixelPerfectRender");
	HX_VISIT_MEMBER_NAME(pixelPerfectPosition,"pixelPerfectPosition");
	HX_VISIT_MEMBER_NAME(angle,"angle");
	HX_VISIT_MEMBER_NAME(moves,"moves");
	HX_VISIT_MEMBER_NAME(immovable,"immovable");
	HX_VISIT_MEMBER_NAME(scrollFactor,"scrollFactor");
	HX_VISIT_MEMBER_NAME(velocity,"velocity");
	HX_VISIT_MEMBER_NAME(acceleration,"acceleration");
	HX_VISIT_MEMBER_NAME(drag,"drag");
	HX_VISIT_MEMBER_NAME(maxVelocity,"maxVelocity");
	HX_VISIT_MEMBER_NAME(last,"last");
	HX_VISIT_MEMBER_NAME(mass,"mass");
	HX_VISIT_MEMBER_NAME(elasticity,"elasticity");
	HX_VISIT_MEMBER_NAME(angularVelocity,"angularVelocity");
	HX_VISIT_MEMBER_NAME(angularAcceleration,"angularAcceleration");
	HX_VISIT_MEMBER_NAME(angularDrag,"angularDrag");
	HX_VISIT_MEMBER_NAME(maxAngular,"maxAngular");
	HX_VISIT_MEMBER_NAME(touching,"touching");
	HX_VISIT_MEMBER_NAME(wasTouching,"wasTouching");
	HX_VISIT_MEMBER_NAME(allowCollisions,"allowCollisions");
	HX_VISIT_MEMBER_NAME(collisionXDrag,"collisionXDrag");
	HX_VISIT_MEMBER_NAME(collisionYDrag,"collisionYDrag");
	HX_VISIT_MEMBER_NAME(path,"path");
	HX_VISIT_MEMBER_NAME(_point,"_point");
	HX_VISIT_MEMBER_NAME(_rect,"_rect");
	 ::flixel::FlxBasic_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxObject_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"drag") ) { return ::hx::Val( drag ); }
		if (HX_FIELD_EQ(inName,"last") ) { return ::hx::Val( last ); }
		if (HX_FIELD_EQ(inName,"mass") ) { return ::hx::Val( mass ); }
		if (HX_FIELD_EQ(inName,"path") ) { return ::hx::Val( path ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_width() : width ); }
		if (HX_FIELD_EQ(inName,"angle") ) { return ::hx::Val( angle ); }
		if (HX_FIELD_EQ(inName,"moves") ) { return ::hx::Val( moves ); }
		if (HX_FIELD_EQ(inName,"solid") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_solid() ); }
		if (HX_FIELD_EQ(inName,"_rect") ) { return ::hx::Val( _rect ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return ::hx::Val( reset_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return ::hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return ::hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_height() : height ); }
		if (HX_FIELD_EQ(inName,"_point") ) { return ::hx::Val( _point ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSize") ) { return ::hx::Val( setSize_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"velocity") ) { return ::hx::Val( velocity ); }
		if (HX_FIELD_EQ(inName,"touching") ) { return ::hx::Val( touching ); }
		if (HX_FIELD_EQ(inName,"initVars") ) { return ::hx::Val( initVars_dyn() ); }
		if (HX_FIELD_EQ(inName,"overlaps") ) { return ::hx::Val( overlaps_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_path") ) { return ::hx::Val( set_path_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"immovable") ) { return ::hx::Val( immovable ); }
		if (HX_FIELD_EQ(inName,"getHitbox") ) { return ::hx::Val( getHitbox_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return ::hx::Val( set_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return ::hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_solid") ) { return ::hx::Val( get_solid_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_solid") ) { return ::hx::Val( set_solid_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_angle") ) { return ::hx::Val( set_angle_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_moves") ) { return ::hx::Val( set_moves_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"elasticity") ) { return ::hx::Val( elasticity ); }
		if (HX_FIELD_EQ(inName,"maxAngular") ) { return ::hx::Val( maxAngular ); }
		if (HX_FIELD_EQ(inName,"overlapsAt") ) { return ::hx::Val( overlapsAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"isOnScreen") ) { return ::hx::Val( isOnScreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"isTouching") ) { return ::hx::Val( isTouching_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return ::hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return ::hx::Val( get_height_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"maxVelocity") ) { return ::hx::Val( maxVelocity ); }
		if (HX_FIELD_EQ(inName,"angularDrag") ) { return ::hx::Val( angularDrag ); }
		if (HX_FIELD_EQ(inName,"wasTouching") ) { return ::hx::Val( wasTouching ); }
		if (HX_FIELD_EQ(inName,"getPosition") ) { return ::hx::Val( getPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMidpoint") ) { return ::hx::Val( getMidpoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"justTouched") ) { return ::hx::Val( justTouched_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPosition") ) { return ::hx::Val( setPosition_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"scrollFactor") ) { return ::hx::Val( scrollFactor ); }
		if (HX_FIELD_EQ(inName,"acceleration") ) { return ::hx::Val( acceleration ); }
		if (HX_FIELD_EQ(inName,"updateMotion") ) { return ::hx::Val( updateMotion_dyn() ); }
		if (HX_FIELD_EQ(inName,"screenCenter") ) { return ::hx::Val( screenCenter_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"collisonXDrag") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_collisonXDrag() ); }
		if (HX_FIELD_EQ(inName,"overlapsPoint") ) { return ::hx::Val( overlapsPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"inWorldBounds") ) { return ::hx::Val( inWorldBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_immovable") ) { return ::hx::Val( set_immovable_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"collisionXDrag") ) { return ::hx::Val( collisionXDrag ); }
		if (HX_FIELD_EQ(inName,"collisionYDrag") ) { return ::hx::Val( collisionYDrag ); }
		if (HX_FIELD_EQ(inName,"initMotionVars") ) { return ::hx::Val( initMotionVars_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBoundingBox") ) { return ::hx::Val( getBoundingBox_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"angularVelocity") ) { return ::hx::Val( angularVelocity ); }
		if (HX_FIELD_EQ(inName,"allowCollisions") ) { return ::hx::Val( allowCollisions ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"overlapsCallback") ) { return ::hx::Val( overlapsCallback_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRotatedBounds") ) { return ::hx::Val( getRotatedBounds_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getScreenPosition") ) { return ::hx::Val( getScreenPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_collisonXDrag") ) { return ::hx::Val( get_collisonXDrag_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_collisonXDrag") ) { return ::hx::Val( set_collisonXDrag_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"pixelPerfectRender") ) { return ::hx::Val( pixelPerfectRender ); }
		if (HX_FIELD_EQ(inName,"overlapsAtCallback") ) { return ::hx::Val( overlapsAtCallback_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"angularAcceleration") ) { return ::hx::Val( angularAcceleration ); }
		if (HX_FIELD_EQ(inName,"set_allowCollisions") ) { return ::hx::Val( set_allowCollisions_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"pixelPerfectPosition") ) { return ::hx::Val( pixelPerfectPosition ); }
		if (HX_FIELD_EQ(inName,"isPixelPerfectRender") ) { return ::hx::Val( isPixelPerfectRender_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"set_pixelPerfectRender") ) { return ::hx::Val( set_pixelPerfectRender_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxObject_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"separate") ) { outValue = separate_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"separateX") ) { outValue = separateX_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"separateY") ) { outValue = separateY_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultMoves") ) { outValue = ( defaultMoves ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"SEPARATE_BIAS") ) { outValue = ( SEPARATE_BIAS ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"separateXHelper") ) { outValue = separateXHelper_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"separateYHelper") ) { outValue = separateYHelper_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"legacySeparateX") ) { outValue = legacySeparateX_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"legacySeparateY") ) { outValue = legacySeparateY_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"computeOverlapX") ) { outValue = computeOverlapX_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"computeOverlapY") ) { outValue = computeOverlapY_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"allowCollisionDrag") ) { outValue = allowCollisionDrag_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"processCheckTilemap") ) { outValue = processCheckTilemap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"updateTouchingFlags") ) { outValue = updateTouchingFlags_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"updateTouchingFlagsX") ) { outValue = updateTouchingFlagsX_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"updateTouchingFlagsY") ) { outValue = updateTouchingFlagsY_dyn(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"updateTouchingFlagsXHelper") ) { outValue = updateTouchingFlagsXHelper_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"updateTouchingFlagsYHelper") ) { outValue = updateTouchingFlagsYHelper_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"defaultPixelPerfectPosition") ) { outValue = ( defaultPixelPerfectPosition ); return true; }
	}
	return false;
}

::hx::Val FlxObject_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_x(inValue.Cast< Float >()) );x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_y(inValue.Cast< Float >()) );y=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"drag") ) { drag=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"last") ) { last=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mass") ) { mass=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"path") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_path(inValue.Cast<  ::flixel::path::FlxPath >()) );path=inValue.Cast<  ::flixel::path::FlxPath >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_width(inValue.Cast< Float >()) );width=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angle") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_angle(inValue.Cast< Float >()) );angle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"moves") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_moves(inValue.Cast< bool >()) );moves=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"solid") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_solid(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"_rect") ) { _rect=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_height(inValue.Cast< Float >()) );height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_point") ) { _point=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"velocity") ) { velocity=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"touching") ) { touching=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"immovable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_immovable(inValue.Cast< bool >()) );immovable=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"elasticity") ) { elasticity=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxAngular") ) { maxAngular=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"maxVelocity") ) { maxVelocity=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angularDrag") ) { angularDrag=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wasTouching") ) { wasTouching=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"scrollFactor") ) { scrollFactor=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"acceleration") ) { acceleration=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"collisonXDrag") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_collisonXDrag(inValue.Cast< bool >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"collisionXDrag") ) { collisionXDrag=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"collisionYDrag") ) { collisionYDrag=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"angularVelocity") ) { angularVelocity=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowCollisions") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_allowCollisions(inValue.Cast< int >()) );allowCollisions=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"pixelPerfectRender") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_pixelPerfectRender(inValue.Cast<  ::Dynamic >()) );pixelPerfectRender=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"angularAcceleration") ) { angularAcceleration=inValue.Cast< Float >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"pixelPerfectPosition") ) { pixelPerfectPosition=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxObject_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"defaultMoves") ) { defaultMoves=ioValue.Cast< bool >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"SEPARATE_BIAS") ) { SEPARATE_BIAS=ioValue.Cast< Float >(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"defaultPixelPerfectPosition") ) { defaultPixelPerfectPosition=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void FlxObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("pixelPerfectRender",dd,59,4f,2f));
	outFields->push(HX_("pixelPerfectPosition",f0,7e,5e,3d));
	outFields->push(HX_("angle",d3,43,e2,22));
	outFields->push(HX_("moves",42,cc,65,0c));
	outFields->push(HX_("immovable",0a,27,70,27));
	outFields->push(HX_("solid",2b,b4,c5,80));
	outFields->push(HX_("scrollFactor",bc,ec,cf,3b));
	outFields->push(HX_("velocity",1d,02,fe,1e));
	outFields->push(HX_("acceleration",40,00,61,9a));
	outFields->push(HX_("drag",f4,2b,70,42));
	outFields->push(HX_("maxVelocity",e1,0c,c4,94));
	outFields->push(HX_("last",56,0a,ad,47));
	outFields->push(HX_("mass",f4,40,56,48));
	outFields->push(HX_("elasticity",79,23,b4,4d));
	outFields->push(HX_("angularVelocity",1f,1f,fe,58));
	outFields->push(HX_("angularAcceleration",42,c6,00,9a));
	outFields->push(HX_("angularDrag",f6,1f,19,9c));
	outFields->push(HX_("maxAngular",9e,28,f6,c2));
	outFields->push(HX_("touching",83,16,25,00));
	outFields->push(HX_("wasTouching",cc,44,e4,5f));
	outFields->push(HX_("allowCollisions",aa,c9,d9,59));
	outFields->push(HX_("collisonXDrag",97,ca,fa,0a));
	outFields->push(HX_("collisionXDrag",ba,de,5f,94));
	outFields->push(HX_("collisionYDrag",3b,73,c6,27));
	outFields->push(HX_("path",a5,e5,51,4a));
	outFields->push(HX_("_point",91,fb,76,c2));
	outFields->push(HX_("_rect",03,69,b8,fe));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxObject_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(FlxObject_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsFloat,(int)offsetof(FlxObject_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsFloat,(int)offsetof(FlxObject_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsFloat,(int)offsetof(FlxObject_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxObject_obj,pixelPerfectRender),HX_("pixelPerfectRender",dd,59,4f,2f)},
	{::hx::fsBool,(int)offsetof(FlxObject_obj,pixelPerfectPosition),HX_("pixelPerfectPosition",f0,7e,5e,3d)},
	{::hx::fsFloat,(int)offsetof(FlxObject_obj,angle),HX_("angle",d3,43,e2,22)},
	{::hx::fsBool,(int)offsetof(FlxObject_obj,moves),HX_("moves",42,cc,65,0c)},
	{::hx::fsBool,(int)offsetof(FlxObject_obj,immovable),HX_("immovable",0a,27,70,27)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(FlxObject_obj,scrollFactor),HX_("scrollFactor",bc,ec,cf,3b)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(FlxObject_obj,velocity),HX_("velocity",1d,02,fe,1e)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(FlxObject_obj,acceleration),HX_("acceleration",40,00,61,9a)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(FlxObject_obj,drag),HX_("drag",f4,2b,70,42)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(FlxObject_obj,maxVelocity),HX_("maxVelocity",e1,0c,c4,94)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(FlxObject_obj,last),HX_("last",56,0a,ad,47)},
	{::hx::fsFloat,(int)offsetof(FlxObject_obj,mass),HX_("mass",f4,40,56,48)},
	{::hx::fsFloat,(int)offsetof(FlxObject_obj,elasticity),HX_("elasticity",79,23,b4,4d)},
	{::hx::fsFloat,(int)offsetof(FlxObject_obj,angularVelocity),HX_("angularVelocity",1f,1f,fe,58)},
	{::hx::fsFloat,(int)offsetof(FlxObject_obj,angularAcceleration),HX_("angularAcceleration",42,c6,00,9a)},
	{::hx::fsFloat,(int)offsetof(FlxObject_obj,angularDrag),HX_("angularDrag",f6,1f,19,9c)},
	{::hx::fsFloat,(int)offsetof(FlxObject_obj,maxAngular),HX_("maxAngular",9e,28,f6,c2)},
	{::hx::fsInt,(int)offsetof(FlxObject_obj,touching),HX_("touching",83,16,25,00)},
	{::hx::fsInt,(int)offsetof(FlxObject_obj,wasTouching),HX_("wasTouching",cc,44,e4,5f)},
	{::hx::fsInt,(int)offsetof(FlxObject_obj,allowCollisions),HX_("allowCollisions",aa,c9,d9,59)},
	{::hx::fsInt,(int)offsetof(FlxObject_obj,collisionXDrag),HX_("collisionXDrag",ba,de,5f,94)},
	{::hx::fsInt,(int)offsetof(FlxObject_obj,collisionYDrag),HX_("collisionYDrag",3b,73,c6,27)},
	{::hx::fsObject /*  ::flixel::path::FlxPath */ ,(int)offsetof(FlxObject_obj,path),HX_("path",a5,e5,51,4a)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(FlxObject_obj,_point),HX_("_point",91,fb,76,c2)},
	{::hx::fsObject /*  ::flixel::math::FlxRect */ ,(int)offsetof(FlxObject_obj,_rect),HX_("_rect",03,69,b8,fe)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FlxObject_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &FlxObject_obj::defaultPixelPerfectPosition,HX_("defaultPixelPerfectPosition",51,0a,c2,b0)},
	{::hx::fsFloat,(void *) &FlxObject_obj::SEPARATE_BIAS,HX_("SEPARATE_BIAS",15,78,21,a0)},
	{::hx::fsBool,(void *) &FlxObject_obj::defaultMoves,HX_("defaultMoves",c1,07,c1,c1)},
	{::hx::fsInt,(void *) &FlxObject_obj::LEFT,HX_("LEFT",07,d0,70,32)},
	{::hx::fsInt,(void *) &FlxObject_obj::RIGHT,HX_("RIGHT",bc,43,52,67)},
	{::hx::fsInt,(void *) &FlxObject_obj::UP,HX_("UP",5b,4a,00,00)},
	{::hx::fsInt,(void *) &FlxObject_obj::DOWN,HX_("DOWN",62,c0,2e,2d)},
	{::hx::fsInt,(void *) &FlxObject_obj::NONE,HX_("NONE",b8,da,ca,33)},
	{::hx::fsInt,(void *) &FlxObject_obj::CEILING,HX_("CEILING",dd,32,72,b3)},
	{::hx::fsInt,(void *) &FlxObject_obj::FLOOR,HX_("FLOOR",ac,09,85,80)},
	{::hx::fsInt,(void *) &FlxObject_obj::WALL,HX_("WALL",0a,25,b3,39)},
	{::hx::fsInt,(void *) &FlxObject_obj::ANY,HX_("ANY",cc,96,31,00)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxObject_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("pixelPerfectRender",dd,59,4f,2f),
	HX_("pixelPerfectPosition",f0,7e,5e,3d),
	HX_("angle",d3,43,e2,22),
	HX_("moves",42,cc,65,0c),
	HX_("immovable",0a,27,70,27),
	HX_("scrollFactor",bc,ec,cf,3b),
	HX_("velocity",1d,02,fe,1e),
	HX_("acceleration",40,00,61,9a),
	HX_("drag",f4,2b,70,42),
	HX_("maxVelocity",e1,0c,c4,94),
	HX_("last",56,0a,ad,47),
	HX_("mass",f4,40,56,48),
	HX_("elasticity",79,23,b4,4d),
	HX_("angularVelocity",1f,1f,fe,58),
	HX_("angularAcceleration",42,c6,00,9a),
	HX_("angularDrag",f6,1f,19,9c),
	HX_("maxAngular",9e,28,f6,c2),
	HX_("touching",83,16,25,00),
	HX_("wasTouching",cc,44,e4,5f),
	HX_("allowCollisions",aa,c9,d9,59),
	HX_("collisionXDrag",ba,de,5f,94),
	HX_("collisionYDrag",3b,73,c6,27),
	HX_("path",a5,e5,51,4a),
	HX_("_point",91,fb,76,c2),
	HX_("_rect",03,69,b8,fe),
	HX_("initVars",dc,5a,00,53),
	HX_("initMotionVars",32,e4,28,65),
	HX_("destroy",fa,2c,86,24),
	HX_("update",09,86,05,87),
	HX_("updateMotion",1f,2d,21,cb),
	HX_("draw",04,2c,70,42),
	HX_("overlaps",0c,d3,2a,45),
	HX_("overlapsCallback",f1,14,bf,b4),
	HX_("overlapsAt",1f,e7,ce,03),
	HX_("overlapsAtCallback",04,f4,81,3b),
	HX_("overlapsPoint",a4,c5,bd,35),
	HX_("inWorldBounds",82,46,f2,f1),
	HX_("getScreenPosition",6b,93,88,24),
	HX_("getPosition",5f,63,ee,f0),
	HX_("getMidpoint",7e,d8,fb,50),
	HX_("getHitbox",ce,76,7e,d3),
	HX_("reset",cf,49,c8,e6),
	HX_("isOnScreen",f5,43,b9,a1),
	HX_("isPixelPerfectRender",67,1c,f9,26),
	HX_("isTouching",8d,28,d4,7a),
	HX_("justTouched",12,59,b8,91),
	HX_("screenCenter",61,2e,f9,e2),
	HX_("setPosition",6b,6a,5b,fb),
	HX_("setSize",83,e1,d7,11),
	HX_("getBoundingBox",11,e8,45,0d),
	HX_("getRotatedBounds",88,12,38,3c),
	HX_("toString",ac,d0,6e,38),
	HX_("set_x",5b,9b,2f,7a),
	HX_("set_y",5c,9b,2f,7a),
	HX_("set_width",69,fe,5c,f1),
	HX_("set_height",24,16,51,f6),
	HX_("get_width",5d,12,0c,0e),
	HX_("get_height",b0,77,d3,f2),
	HX_("get_solid",82,10,6f,c4),
	HX_("set_solid",8e,fc,bf,a7),
	HX_("set_angle",36,8c,dc,49),
	HX_("set_moves",a5,14,60,33),
	HX_("set_immovable",ed,dc,d9,2d),
	HX_("set_pixelPerfectRender",9a,4f,8f,bc),
	HX_("set_allowCollisions",cd,8b,81,21),
	HX_("get_collisonXDrag",ee,d5,6a,11),
	HX_("set_collisonXDrag",fa,ad,d8,34),
	HX_("set_path",a2,fa,69,78),
	::String(null()) };

static void FlxObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxObject_obj::defaultPixelPerfectPosition,"defaultPixelPerfectPosition");
	HX_MARK_MEMBER_NAME(FlxObject_obj::SEPARATE_BIAS,"SEPARATE_BIAS");
	HX_MARK_MEMBER_NAME(FlxObject_obj::defaultMoves,"defaultMoves");
	HX_MARK_MEMBER_NAME(FlxObject_obj::LEFT,"LEFT");
	HX_MARK_MEMBER_NAME(FlxObject_obj::RIGHT,"RIGHT");
	HX_MARK_MEMBER_NAME(FlxObject_obj::UP,"UP");
	HX_MARK_MEMBER_NAME(FlxObject_obj::DOWN,"DOWN");
	HX_MARK_MEMBER_NAME(FlxObject_obj::NONE,"NONE");
	HX_MARK_MEMBER_NAME(FlxObject_obj::CEILING,"CEILING");
	HX_MARK_MEMBER_NAME(FlxObject_obj::FLOOR,"FLOOR");
	HX_MARK_MEMBER_NAME(FlxObject_obj::WALL,"WALL");
	HX_MARK_MEMBER_NAME(FlxObject_obj::ANY,"ANY");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxObject_obj::defaultPixelPerfectPosition,"defaultPixelPerfectPosition");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::SEPARATE_BIAS,"SEPARATE_BIAS");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::defaultMoves,"defaultMoves");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::LEFT,"LEFT");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::RIGHT,"RIGHT");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::UP,"UP");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::DOWN,"DOWN");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::NONE,"NONE");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::CEILING,"CEILING");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::FLOOR,"FLOOR");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::WALL,"WALL");
	HX_VISIT_MEMBER_NAME(FlxObject_obj::ANY,"ANY");
};

#endif

::hx::Class FlxObject_obj::__mClass;

static ::String FlxObject_obj_sStaticFields[] = {
	HX_("defaultPixelPerfectPosition",51,0a,c2,b0),
	HX_("SEPARATE_BIAS",15,78,21,a0),
	HX_("defaultMoves",c1,07,c1,c1),
	HX_("LEFT",07,d0,70,32),
	HX_("RIGHT",bc,43,52,67),
	HX_("UP",5b,4a,00,00),
	HX_("DOWN",62,c0,2e,2d),
	HX_("NONE",b8,da,ca,33),
	HX_("CEILING",dd,32,72,b3),
	HX_("FLOOR",ac,09,85,80),
	HX_("WALL",0a,25,b3,39),
	HX_("ANY",cc,96,31,00),
	HX_("allowCollisionDrag",3d,eb,4d,c1),
	HX_("processCheckTilemap",55,01,54,c1),
	HX_("separate",63,1f,1c,07),
	HX_("separateX",95,57,7f,31),
	HX_("separateY",96,57,7f,31),
	HX_("separateXHelper",e3,a6,fb,12),
	HX_("separateYHelper",a4,1d,91,3c),
	HX_("legacySeparateX",0c,ac,0c,2f),
	HX_("legacySeparateY",0d,ac,0c,2f),
	HX_("updateTouchingFlags",fb,01,ac,bd),
	HX_("updateTouchingFlagsX",fd,b9,d5,38),
	HX_("updateTouchingFlagsXHelper",4b,c7,ff,5a),
	HX_("updateTouchingFlagsY",fe,b9,d5,38),
	HX_("updateTouchingFlagsYHelper",0c,3e,95,84),
	HX_("computeOverlapX",88,a5,ab,dc),
	HX_("computeOverlapY",89,a5,ab,dc),
	::String(null())
};

void FlxObject_obj::__register()
{
	FlxObject_obj _hx_dummy;
	FlxObject_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.FlxObject",1f,50,95,35);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxObject_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxObject_obj::__SetStatic;
	__mClass->mMarkFunc = FlxObject_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxObject_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxObject_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxObject_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxObject_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_80_boot)
HXDLIN(  80)		defaultPixelPerfectPosition = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_87_boot)
HXDLIN(  87)		SEPARATE_BIAS = ((Float)4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_94_boot)
HXDLIN(  94)		defaultMoves = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_102_boot)
HXDLIN( 102)		LEFT = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_110_boot)
HXDLIN( 110)		RIGHT = 16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_118_boot)
HXDLIN( 118)		UP = 256;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_126_boot)
HXDLIN( 126)		DOWN = 4096;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_134_boot)
HXDLIN( 134)		NONE = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_142_boot)
HXDLIN( 142)		CEILING = 256;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_150_boot)
HXDLIN( 150)		FLOOR = 4096;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_158_boot)
HXDLIN( 158)		WALL = 17;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c625bfaa5b4263df_166_boot)
HXDLIN( 166)		ANY = 4369;
            	}
}

} // end namespace flixel
