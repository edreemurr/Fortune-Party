// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math__FlxPoint_FlxPoint_Impl_
#include <flixel/math/_FlxPoint/FlxPoint_Impl_.h>
#endif
#ifndef INCLUDED_flixel_path_FlxPath
#include <flixel/path/FlxPath.h>
#endif
#ifndef INCLUDED_flixel_path_FlxPathAnchorMode
#include <flixel/path/FlxPathAnchorMode.h>
#endif
#ifndef INCLUDED_flixel_path_FlxTypedBasePath
#include <flixel/path/FlxTypedBasePath.h>
#endif
#ifndef INCLUDED_flixel_path__FlxPath_AnchorTools
#include <flixel/path/_FlxPath/AnchorTools.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal1
#include <flixel/util/_FlxSignal/FlxSignal1.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_128203ded77fa8c1_245_new,"flixel.path.FlxPath","new",0xc203a592,"flixel.path.FlxPath.new","flixel/path/FlxPath.hx",245,0xbf2b467e)
HX_DEFINE_STACK_FRAME(_hx_pos_128203ded77fa8c1_114_new,"flixel.path.FlxPath","new",0xc203a592,"flixel.path.FlxPath.new","flixel/path/FlxPath.hx",114,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_256_reset,"flixel.path.FlxPath","reset",0x53fd4f81,"flixel.path.FlxPath.reset","flixel/path/FlxPath.hx",256,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_277_setProperties,"flixel.path.FlxPath","setProperties",0x8fa441e7,"flixel.path.FlxPath.setProperties","flixel/path/FlxPath.hx",277,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_296_start,"flixel.path.FlxPath","start",0xf1407a14,"flixel.path.FlxPath.start","flixel/path/FlxPath.hx",296,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_325_restart,"flixel.path.FlxPath","restart",0x536d1e01,"flixel.path.FlxPath.restart","flixel/path/FlxPath.hx",325,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_337_setNode,"flixel.path.FlxPath","setNode",0xf755a0f6,"flixel.path.FlxPath.setNode","flixel/path/FlxPath.hx",337,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_344_computeCenter,"flixel.path.FlxPath","computeCenter",0xfd6e5c5e,"flixel.path.FlxPath.computeCenter","flixel/path/FlxPath.hx",344,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_348_isTargetAtNext,"flixel.path.FlxPath","isTargetAtNext",0x6664c8cf,"flixel.path.FlxPath.isTargetAtNext","flixel/path/FlxPath.hx",348,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_376_updateTarget,"flixel.path.FlxPath","updateTarget",0x1b698ec8,"flixel.path.FlxPath.updateTarget","flixel/path/FlxPath.hx",376,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_415_calculateVelocity,"flixel.path.FlxPath","calculateVelocity",0x3166f255,"flixel.path.FlxPath.calculateVelocity","flixel/path/FlxPath.hx",415,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_449_advancePath,"flixel.path.FlxPath","advancePath",0x4125da79,"flixel.path.FlxPath.advancePath","flixel/path/FlxPath.hx",449,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_456_advance,"flixel.path.FlxPath","advance",0xd7d35eb4,"flixel.path.FlxPath.advance","flixel/path/FlxPath.hx",456,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_521_cancel,"flixel.path.FlxPath","cancel",0xd963e388,"flixel.path.FlxPath.cancel","flixel/path/FlxPath.hx",521,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_535_onEnd,"flixel.path.FlxPath","onEnd",0x9f999dae,"flixel.path.FlxPath.onEnd","flixel/path/FlxPath.hx",535,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_552_add,"flixel.path.FlxPath","add",0xc1f9c753,"flixel.path.FlxPath.add","flixel/path/FlxPath.hx",552,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_567_addAt,"flixel.path.FlxPath","addAt",0x8978bb26,"flixel.path.FlxPath.addAt","flixel/path/FlxPath.hx",567,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_585_addPoint,"flixel.path.FlxPath","addPoint",0x0590effd,"flixel.path.FlxPath.addPoint","flixel/path/FlxPath.hx",585,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_609_addPointAt,"flixel.path.FlxPath","addPointAt",0x3faae250,"flixel.path.FlxPath.addPointAt","flixel/path/FlxPath.hx",609,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_631_remove,"flixel.path.FlxPath","remove",0x25b89252,"flixel.path.FlxPath.remove","flixel/path/FlxPath.hx",631,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_647_removeAt,"flixel.path.FlxPath","removeAt",0x72bf83e5,"flixel.path.FlxPath.removeAt","flixel/path/FlxPath.hx",647,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_665_head,"flixel.path.FlxPath","head",0xfd35dfae,"flixel.path.FlxPath.head","flixel/path/FlxPath.hx",665,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_679_tail,"flixel.path.FlxPath","tail",0x05216d1e,"flixel.path.FlxPath.tail","flixel/path/FlxPath.hx",679,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_689_get_nodeIndex,"flixel.path.FlxPath","get_nodeIndex",0xb0cb5539,"flixel.path.FlxPath.get_nodeIndex","flixel/path/FlxPath.hx",689,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_693_set_immovable,"flixel.path.FlxPath","set_immovable",0xbaf6e49f,"flixel.path.FlxPath.set_immovable","flixel/path/FlxPath.hx",693,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_714_set_autoCenter,"flixel.path.FlxPath","set_autoCenter",0xf4055b6f,"flixel.path.FlxPath.set_autoCenter","flixel/path/FlxPath.hx",714,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_723_get_autoCenter,"flixel.path.FlxPath","get_autoCenter",0xd3e572fb,"flixel.path.FlxPath.get_autoCenter","flixel/path/FlxPath.hx",723,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_728_get__inc,"flixel.path.FlxPath","get__inc",0x847a22f6,"flixel.path.FlxPath.get__inc","flixel/path/FlxPath.hx",728,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_732_set__inc,"flixel.path.FlxPath","set__inc",0x32d77c6a,"flixel.path.FlxPath.set__inc","flixel/path/FlxPath.hx",732,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_738_get__mode,"flixel.path.FlxPath","get__mode",0x690a124b,"flixel.path.FlxPath.get__mode","flixel/path/FlxPath.hx",738,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_752_set__mode,"flixel.path.FlxPath","set__mode",0x4c5afe57,"flixel.path.FlxPath.set__mode","flixel/path/FlxPath.hx",752,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_778_get_object,"flixel.path.FlxPath","get_object",0x8cc60396,"flixel.path.FlxPath.get_object","flixel/path/FlxPath.hx",778,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_783_set_object,"flixel.path.FlxPath","set_object",0x9043a20a,"flixel.path.FlxPath.set_object","flixel/path/FlxPath.hx",783,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_121_boot,"flixel.path.FlxPath","boot",0xf9463ac0,"flixel.path.FlxPath.boot","flixel/path/FlxPath.hx",121,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_128_boot,"flixel.path.FlxPath","boot",0xf9463ac0,"flixel.path.FlxPath.boot","flixel/path/FlxPath.hx",128,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_135_boot,"flixel.path.FlxPath","boot",0xf9463ac0,"flixel.path.FlxPath.boot","flixel/path/FlxPath.hx",135,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_142_boot,"flixel.path.FlxPath","boot",0xf9463ac0,"flixel.path.FlxPath.boot","flixel/path/FlxPath.hx",142,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_149_boot,"flixel.path.FlxPath","boot",0xf9463ac0,"flixel.path.FlxPath.boot","flixel/path/FlxPath.hx",149,0xbf2b467e)
HX_LOCAL_STACK_FRAME(_hx_pos_128203ded77fa8c1_154_boot,"flixel.path.FlxPath","boot",0xf9463ac0,"flixel.path.FlxPath.boot","flixel/path/FlxPath.hx",154,0xbf2b467e)
namespace flixel{
namespace path{

void FlxPath_obj::__construct(::Array< ::Dynamic> nodes){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::path::FlxPath,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::path::FlxTypedBasePath _){
            			HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_245_new)
HXLINE( 245)			if (::hx::IsNotNull( _gthis->onComplete )) {
HXLINE( 246)				_gthis->onComplete(_gthis);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_114_new)
HXLINE( 229)		this->_firstUpdate = false;
HXLINE( 227)		this->_wasObjectImmovable = null();
HXLINE( 213)		this->axes = 17;
HXLINE( 199)		this->angleOffset = ((Float)0);
HXLINE( 190)		this->autoRotate = false;
HXLINE( 185)		this->centerMode = ::flixel::path::FlxPathAnchorMode_obj::CENTER_dyn();
HXLINE( 173)		this->angle = ((Float)0);
HXLINE( 168)		this->immovable = false;
HXLINE( 163)		this->speed = ((Float)0);
HXLINE( 239)		 ::flixel::path::FlxPath _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 240)		::Array< ::Dynamic> _hx_tmp;
HXDLIN( 240)		if (::hx::IsNotNull( nodes )) {
HXLINE( 240)			_hx_tmp = nodes->copy();
            		}
            		else {
HXLINE( 240)			_hx_tmp = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXDLIN( 240)		super::__construct(_hx_tmp,null(),null());
HXLINE( 242)		this->set_active(false);
HXLINE( 243)		this->onEndReached->add( ::Dynamic(new _hx_Closure_0(_gthis)));
            	}

Dynamic FlxPath_obj::__CreateEmpty() { return new FlxPath_obj; }

void *FlxPath_obj::_hx_vtable = 0;

Dynamic FlxPath_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxPath_obj > _hx_result = new FlxPath_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FlxPath_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7ccf8994) {
		if (inClassId<=(int)0x4d90b1b6) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x4d90b1b6;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	} else {
		return inClassId==(int)0x7f944777;
	}
}

 ::flixel::path::FlxPath FlxPath_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_256_reset)
HXLINE( 261)		this->centerMode = ::flixel::path::FlxPathAnchorMode_obj::CENTER_dyn();
HXLINE( 262)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPath_obj,reset,return )

 ::flixel::path::FlxPath FlxPath_obj::setProperties(::hx::Null< Float >  __o_speed,::hx::Null< int >  __o_mode,::hx::Null< bool >  __o_autoRotate){
            		Float speed = __o_speed.Default(((Float)100.0));
            		int mode = __o_mode.Default(0);
            		bool autoRotate = __o_autoRotate.Default(false);
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_277_setProperties)
HXLINE( 278)		this->speed = ::Math_obj::abs(speed);
HXLINE( 279)		this->set__mode(mode);
HXLINE( 280)		this->autoRotate = autoRotate;
HXLINE( 281)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxPath_obj,setProperties,return )

 ::flixel::path::FlxPath FlxPath_obj::start(::Array< ::Dynamic> nodes,::hx::Null< Float >  __o_speed,::hx::Null< int >  __o_mode,::hx::Null< bool >  __o_autoRotate,::hx::Null< bool >  __o_nodesAsReference){
            		Float speed = __o_speed.Default(((Float)100.0));
            		int mode = __o_mode.Default(0);
            		bool autoRotate = __o_autoRotate.Default(false);
            		bool nodesAsReference = __o_nodesAsReference.Default(false);
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_296_start)
HXLINE( 297)		if (::hx::IsNotNull( nodes )) {
HXLINE( 299)			if (nodesAsReference) {
HXLINE( 301)				this->nodes = nodes;
            			}
            			else {
HXLINE( 305)				this->nodes = nodes->copy();
            			}
            		}
HXLINE( 309)		this->setProperties(speed,mode,autoRotate);
HXLINE( 311)		if ((this->nodes->length > 0)) {
HXLINE( 313)			this->restart();
            		}
HXLINE( 315)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxPath_obj,start,return )

 ::flixel::path::FlxTypedBasePath FlxPath_obj::restart(){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_325_restart)
HXLINE( 326)		this->super::restart();
HXLINE( 327)		this->set_active((this->nodes->length > 0));
HXLINE( 328)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


 ::flixel::path::FlxPath FlxPath_obj::setNode(int nodeIndex){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_337_setNode)
HXLINE( 338)		this->startAt(nodeIndex);
HXLINE( 339)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPath_obj,setNode,return )

 ::flixel::math::FlxBasePoint FlxPath_obj::computeCenter( ::flixel::math::FlxBasePoint point){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_344_computeCenter)
HXDLIN( 344)		 ::flixel::path::FlxPathAnchorMode _hx_tmp = this->centerMode;
HXDLIN( 344)		return ::flixel::path::_FlxPath::AnchorTools_obj::computeAnchor(_hx_tmp,this->get_object(),point);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPath_obj,computeCenter,return )

bool FlxPath_obj::isTargetAtNext(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_348_isTargetAtNext)
HXLINE( 350)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 350)		point->_inPool = false;
HXDLIN( 350)		 ::flixel::math::FlxBasePoint center = this->computeCenter(point);
HXLINE( 351)		 ::flixel::math::FlxBasePoint deltaX;
HXDLIN( 351)		bool deltaX1;
HXDLIN( 351)		if (::hx::IsNotNull( this->nodes )) {
HXLINE( 351)			deltaX1 = (this->nextIndex >= 0);
            		}
            		else {
HXLINE( 351)			deltaX1 = false;
            		}
HXDLIN( 351)		if (deltaX1) {
HXLINE( 351)			deltaX = this->nodes->__get(this->nextIndex).StaticCast<  ::flixel::math::FlxBasePoint >();
            		}
            		else {
HXLINE( 351)			deltaX = null();
            		}
HXDLIN( 351)		Float deltaX2 = (deltaX->x - center->x);
HXLINE( 352)		 ::flixel::math::FlxBasePoint deltaY;
HXDLIN( 352)		bool deltaY1;
HXDLIN( 352)		if (::hx::IsNotNull( this->nodes )) {
HXLINE( 352)			deltaY1 = (this->nextIndex >= 0);
            		}
            		else {
HXLINE( 352)			deltaY1 = false;
            		}
HXDLIN( 352)		if (deltaY1) {
HXLINE( 352)			deltaY = this->nodes->__get(this->nextIndex).StaticCast<  ::flixel::math::FlxBasePoint >();
            		}
            		else {
HXLINE( 352)			deltaY = null();
            		}
HXDLIN( 352)		Float deltaY2 = (deltaY->y - center->y);
HXLINE( 353)		center->put();
HXLINE( 357)		if ((this->axes == 1)) {
HXLINE( 359)			Float _hx_tmp;
HXDLIN( 359)			if ((deltaX2 > 0)) {
HXLINE( 359)				_hx_tmp = deltaX2;
            			}
            			else {
HXLINE( 359)				_hx_tmp = -(deltaX2);
            			}
HXDLIN( 359)			return (_hx_tmp < (this->speed * elapsed));
            		}
HXLINE( 362)		if ((this->axes == 16)) {
HXLINE( 364)			Float _hx_tmp1;
HXDLIN( 364)			if ((deltaY2 > 0)) {
HXLINE( 364)				_hx_tmp1 = deltaY2;
            			}
            			else {
HXLINE( 364)				_hx_tmp1 = -(deltaY2);
            			}
HXDLIN( 364)			return (_hx_tmp1 < (this->speed * elapsed));
            		}
HXLINE( 367)		return (::Math_obj::sqrt(((deltaX2 * deltaX2) + (deltaY2 * deltaY2))) < (this->speed * elapsed));
            	}


void FlxPath_obj::updateTarget(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_376_updateTarget)
HXLINE( 377)		if (this->_firstUpdate) {
HXLINE( 379)			if (this->immovable) {
HXLINE( 381)				this->_wasObjectImmovable = this->get_object()->immovable;
HXLINE( 382)				this->get_object()->set_immovable(true);
            			}
HXLINE( 384)			this->_firstUpdate = false;
            		}
HXLINE( 388)		if ((this->speed == 0)) {
HXLINE( 389)			return;
            		}
HXLINE( 392)		::flixel::path::FlxPath_obj::_point = this->computeCenter(::flixel::path::FlxPath_obj::_point);
HXLINE( 393)		 ::flixel::math::FlxBasePoint node;
HXDLIN( 393)		bool node1;
HXDLIN( 393)		if (::hx::IsNotNull( this->nodes )) {
HXLINE( 393)			node1 = (this->nextIndex >= 0);
            		}
            		else {
HXLINE( 393)			node1 = false;
            		}
HXDLIN( 393)		if (node1) {
HXLINE( 393)			node = this->nodes->__get(this->nextIndex).StaticCast<  ::flixel::math::FlxBasePoint >();
            		}
            		else {
HXLINE( 393)			node = null();
            		}
HXLINE( 395)		 ::flixel::math::FlxBasePoint _this = ::flixel::path::FlxPath_obj::_point;
HXDLIN( 395)		bool result;
HXDLIN( 395)		if ((::Math_obj::abs((_this->x - node->x)) <= ((Float)0.0000001))) {
HXLINE( 395)			result = (::Math_obj::abs((_this->y - node->y)) <= ((Float)0.0000001));
            		}
            		else {
HXLINE( 395)			result = false;
            		}
HXDLIN( 395)		if (node->_weak) {
HXLINE( 395)			node->put();
            		}
HXDLIN( 395)		if (!(result)) {
HXLINE( 397)			this->calculateVelocity(node,(this->axes == 1),(this->axes == 16));
            		}
            		else {
HXLINE( 401)			 ::flixel::math::FlxBasePoint this1 = this->get_object()->velocity;
HXDLIN( 401)			this1->set_x(( (Float)(0) ));
HXDLIN( 401)			this1->set_y(( (Float)(0) ));
            		}
HXLINE( 405)		if (this->autoRotate) {
HXLINE( 407)			this->get_object()->angularVelocity = ( (Float)(0) );
HXLINE( 408)			this->get_object()->angularAcceleration = ( (Float)(0) );
HXLINE( 409)			 ::flixel::FlxObject _hx_tmp = this->get_object();
HXDLIN( 409)			_hx_tmp->set_angle((this->angle + this->angleOffset));
            		}
            	}


void FlxPath_obj::calculateVelocity( ::flixel::math::FlxBasePoint node,bool horizontalOnly,bool verticalOnly){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_415_calculateVelocity)
HXDLIN( 415)		bool _hx_tmp;
HXDLIN( 415)		if (!(horizontalOnly)) {
HXDLIN( 415)			_hx_tmp = (::flixel::path::FlxPath_obj::_point->y == node->y);
            		}
            		else {
HXDLIN( 415)			_hx_tmp = true;
            		}
HXDLIN( 415)		if (_hx_tmp) {
HXLINE( 417)			{
HXLINE( 417)				 ::flixel::math::FlxBasePoint this1 = this->get_object()->velocity;
HXDLIN( 417)				Float x;
HXDLIN( 417)				if ((::flixel::path::FlxPath_obj::_point->x < node->x)) {
HXLINE( 417)					x = this->speed;
            				}
            				else {
HXLINE( 417)					x = -(this->speed);
            				}
HXDLIN( 417)				this1->set_x(x);
            			}
HXLINE( 418)			Float _hx_tmp1;
HXDLIN( 418)			if ((this->get_object()->velocity->x < 0)) {
HXLINE( 418)				_hx_tmp1 = ( (Float)(180) );
            			}
            			else {
HXLINE( 418)				_hx_tmp1 = ( (Float)(0) );
            			}
HXDLIN( 418)			this->angle = _hx_tmp1;
HXLINE( 420)			if (!(horizontalOnly)) {
HXLINE( 422)				this->get_object()->velocity->set_y(( (Float)(0) ));
            			}
            		}
            		else {
HXLINE( 425)			bool _hx_tmp2;
HXDLIN( 425)			if (!(verticalOnly)) {
HXLINE( 425)				_hx_tmp2 = (::flixel::path::FlxPath_obj::_point->x == node->x);
            			}
            			else {
HXLINE( 425)				_hx_tmp2 = true;
            			}
HXDLIN( 425)			if (_hx_tmp2) {
HXLINE( 427)				{
HXLINE( 427)					 ::flixel::math::FlxBasePoint this2 = this->get_object()->velocity;
HXDLIN( 427)					Float y;
HXDLIN( 427)					if ((::flixel::path::FlxPath_obj::_point->y < node->y)) {
HXLINE( 427)						y = this->speed;
            					}
            					else {
HXLINE( 427)						y = -(this->speed);
            					}
HXDLIN( 427)					this2->set_y(y);
            				}
HXLINE( 428)				Float _hx_tmp3;
HXDLIN( 428)				if ((this->get_object()->velocity->y < 0)) {
HXLINE( 428)					_hx_tmp3 = ( (Float)(-90) );
            				}
            				else {
HXLINE( 428)					_hx_tmp3 = ( (Float)(90) );
            				}
HXDLIN( 428)				this->angle = _hx_tmp3;
HXLINE( 430)				if (!(verticalOnly)) {
HXLINE( 432)					this->get_object()->velocity->set_x(( (Float)(0) ));
            				}
            			}
            			else {
HXLINE( 437)				 ::flixel::math::FlxBasePoint this3 = this->get_object()->velocity;
HXDLIN( 437)				{
HXLINE( 437)					Float y1 = node->y;
HXDLIN( 437)					this3->set_x(node->x);
HXDLIN( 437)					this3->set_y(y1);
            				}
HXDLIN( 437)				if (node->_weak) {
HXLINE( 437)					node->put();
            				}
HXDLIN( 437)				 ::flixel::math::FlxBasePoint this4 = this3;
HXDLIN( 437)				 ::flixel::math::FlxBasePoint point = ::flixel::path::FlxPath_obj::_point;
HXDLIN( 437)				{
HXLINE( 437)					Float y2 = point->y;
HXDLIN( 437)					this4->set_x((this4->x - point->x));
HXDLIN( 437)					this4->set_y((this4->y - y2));
            				}
HXDLIN( 437)				if (point->_weak) {
HXLINE( 437)					point->put();
            				}
HXDLIN( 437)				 ::flixel::math::FlxBasePoint velocity = this4;
HXLINE( 438)				{
HXLINE( 438)					Float l = this->speed;
HXDLIN( 438)					bool _hx_tmp4;
HXDLIN( 438)					if ((::Math_obj::abs(velocity->x) < ((Float)0.0000001))) {
HXLINE( 438)						_hx_tmp4 = (::Math_obj::abs(velocity->y) < ((Float)0.0000001));
            					}
            					else {
HXLINE( 438)						_hx_tmp4 = false;
            					}
HXDLIN( 438)					if (!(_hx_tmp4)) {
HXLINE( 438)						Float a = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::get_radians(velocity);
HXDLIN( 438)						velocity->set_x((l * ::Math_obj::cos(a)));
HXDLIN( 438)						velocity->set_y((l * ::Math_obj::sin(a)));
            					}
            				}
HXLINE( 439)				Float _hx_tmp5 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::get_radians(velocity);
HXDLIN( 439)				this->angle = (_hx_tmp5 * (( (Float)(180) ) / ::Math_obj::PI));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxPath_obj,calculateVelocity,(void))

 ::flixel::math::FlxBasePoint FlxPath_obj::advancePath(::hx::Null< bool >  __o_snap){
            		bool snap = __o_snap.Default(true);
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_449_advancePath)
HXLINE( 450)		this->advance();
HXLINE( 452)		bool _hx_tmp;
HXDLIN( 452)		if (::hx::IsNotNull( this->nodes )) {
HXLINE( 452)			_hx_tmp = (this->currentIndex >= 0);
            		}
            		else {
HXLINE( 452)			_hx_tmp = false;
            		}
HXDLIN( 452)		if (_hx_tmp) {
HXLINE( 452)			return this->nodes->__get(this->currentIndex).StaticCast<  ::flixel::math::FlxBasePoint >();
            		}
            		else {
HXLINE( 452)			return null();
            		}
HXDLIN( 452)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPath_obj,advancePath,return )

void FlxPath_obj::advance(){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_456_advance)
HXLINE( 457)		int this1 = this->axes;
HXDLIN( 457)		bool _hx_tmp;
HXDLIN( 457)		if ((this1 != 1)) {
HXLINE( 457)			_hx_tmp = (this1 == 17);
            		}
            		else {
HXLINE( 457)			_hx_tmp = true;
            		}
HXDLIN( 457)		if (_hx_tmp) {
HXLINE( 459)			 ::flixel::math::FlxBasePoint _hx_tmp1;
HXDLIN( 459)			bool _hx_tmp2;
HXDLIN( 459)			if (::hx::IsNotNull( this->nodes )) {
HXLINE( 459)				_hx_tmp2 = (this->nextIndex >= 0);
            			}
            			else {
HXLINE( 459)				_hx_tmp2 = false;
            			}
HXDLIN( 459)			if (_hx_tmp2) {
HXLINE( 459)				_hx_tmp1 = this->nodes->__get(this->nextIndex).StaticCast<  ::flixel::math::FlxBasePoint >();
            			}
            			else {
HXLINE( 459)				_hx_tmp1 = null();
            			}
HXDLIN( 459)			this->get_object()->set_x(_hx_tmp1->x);
HXLINE( 460)			{
HXLINE( 460)				 ::flixel::path::FlxPathAnchorMode _g = this->centerMode;
HXDLIN( 460)				switch((int)(_g->_hx_getIndex())){
            					case (int)0: {
            					}
            					break;
            					case (int)1: {
HXLINE( 468)						 ::flixel::FlxObject fh = this->get_object();
HXDLIN( 468)						Float fh1 = fh->x;
HXDLIN( 468)						fh->set_x((fh1 - (this->get_object()->get_width() * ((Float)0.5))));
            					}
            					break;
            					case (int)2: {
HXLINE( 463)						if (::Std_obj::isOfType(this->get_object(),::hx::ClassOf< ::flixel::FlxSprite >())) {
HXLINE( 464)							 ::flixel::FlxObject fh2 = this->get_object();
HXDLIN( 464)							Float fh3 = fh2->x;
HXDLIN( 464)							fh2->set_x((fh3 - ( ( ::flixel::FlxSprite)(this->get_object()) )->origin->x));
            						}
            					}
            					break;
            					case (int)3: {
HXLINE( 465)						 ::flixel::math::FlxBasePoint offset = _g->_hx_getObject(0).StaticCast<  ::flixel::math::FlxBasePoint >();
HXDLIN( 465)						{
HXLINE( 466)							 ::flixel::FlxObject fh4 = this->get_object();
HXDLIN( 466)							fh4->set_x((fh4->x - offset->x));
            						}
            					}
            					break;
            				}
            			}
            		}
HXLINE( 473)		int this2 = this->axes;
HXDLIN( 473)		bool _hx_tmp3;
HXDLIN( 473)		if ((this2 != 16)) {
HXLINE( 473)			_hx_tmp3 = (this2 == 17);
            		}
            		else {
HXLINE( 473)			_hx_tmp3 = true;
            		}
HXDLIN( 473)		if (_hx_tmp3) {
HXLINE( 475)			 ::flixel::math::FlxBasePoint _hx_tmp4;
HXDLIN( 475)			bool _hx_tmp5;
HXDLIN( 475)			if (::hx::IsNotNull( this->nodes )) {
HXLINE( 475)				_hx_tmp5 = (this->nextIndex >= 0);
            			}
            			else {
HXLINE( 475)				_hx_tmp5 = false;
            			}
HXDLIN( 475)			if (_hx_tmp5) {
HXLINE( 475)				_hx_tmp4 = this->nodes->__get(this->nextIndex).StaticCast<  ::flixel::math::FlxBasePoint >();
            			}
            			else {
HXLINE( 475)				_hx_tmp4 = null();
            			}
HXDLIN( 475)			this->get_object()->set_y(_hx_tmp4->y);
HXLINE( 476)			{
HXLINE( 476)				 ::flixel::path::FlxPathAnchorMode _g1 = this->centerMode;
HXDLIN( 476)				switch((int)(_g1->_hx_getIndex())){
            					case (int)0: {
            					}
            					break;
            					case (int)1: {
HXLINE( 484)						 ::flixel::FlxObject fh5 = this->get_object();
HXDLIN( 484)						Float fh6 = fh5->y;
HXDLIN( 484)						fh5->set_y((fh6 - (this->get_object()->get_height() * ((Float)0.5))));
            					}
            					break;
            					case (int)2: {
HXLINE( 479)						if (::Std_obj::isOfType(this->get_object(),::hx::ClassOf< ::flixel::FlxSprite >())) {
HXLINE( 480)							 ::flixel::FlxObject fh7 = this->get_object();
HXDLIN( 480)							Float fh8 = fh7->y;
HXDLIN( 480)							fh7->set_y((fh8 - ( ( ::flixel::FlxSprite)(this->get_object()) )->origin->y));
            						}
            					}
            					break;
            					case (int)3: {
HXLINE( 481)						 ::flixel::math::FlxBasePoint offset1 = _g1->_hx_getObject(0).StaticCast<  ::flixel::math::FlxBasePoint >();
HXDLIN( 481)						{
HXLINE( 482)							 ::flixel::FlxObject fh9 = this->get_object();
HXDLIN( 482)							fh9->set_y((fh9->y - offset1->y));
            						}
            					}
            					break;
            				}
            			}
            		}
HXLINE( 489)		this->super::advance();
            	}


 ::flixel::path::FlxPath FlxPath_obj::cancel(){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_521_cancel)
HXLINE( 522)		this->onEnd();
HXLINE( 524)		if (::hx::IsNotNull( this->get_object() )) {
HXLINE( 526)			 ::flixel::math::FlxBasePoint this1 = this->get_object()->velocity;
HXDLIN( 526)			this1->set_x(( (Float)(0) ));
HXDLIN( 526)			this1->set_y(( (Float)(0) ));
            		}
HXLINE( 528)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPath_obj,cancel,return )

void FlxPath_obj::onEnd(){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_535_onEnd)
HXLINE( 536)		this->set_active(false);
HXLINE( 537)		if (::hx::IsNotNull( this->_wasObjectImmovable )) {
HXLINE( 538)			this->get_object()->set_immovable(( (bool)(this->_wasObjectImmovable) ));
            		}
HXLINE( 540)		this->_wasObjectImmovable = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPath_obj,onEnd,(void))

 ::flixel::path::FlxPath FlxPath_obj::add(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_552_add)
HXLINE( 553)		::Array< ::Dynamic> _hx_tmp = this->nodes;
HXDLIN( 553)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 553)		point->_inPool = false;
HXDLIN( 553)		_hx_tmp->push(point);
HXLINE( 554)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxPath_obj,add,return )

 ::flixel::path::FlxPath FlxPath_obj::addAt(Float x,Float y,int index){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_567_addAt)
HXLINE( 568)		if ((index < 0)) {
HXLINE( 569)			return ::hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 570)		::Array< ::Dynamic> _hx_tmp = this->nodes;
HXDLIN( 570)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 570)		point->_inPool = false;
HXDLIN( 570)		_hx_tmp->insert(index,point);
HXLINE( 571)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxPath_obj,addAt,return )

 ::flixel::path::FlxPath FlxPath_obj::addPoint( ::flixel::math::FlxBasePoint node,::hx::Null< bool >  __o_asReference){
            		bool asReference = __o_asReference.Default(false);
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_585_addPoint)
HXLINE( 586)		if (asReference) {
HXLINE( 588)			this->nodes->push(node);
            		}
            		else {
HXLINE( 592)			::Array< ::Dynamic> _hx_tmp = this->nodes;
HXDLIN( 592)			Float x = node->x;
HXDLIN( 592)			Float y = node->y;
HXDLIN( 592)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 592)			point->_inPool = false;
HXDLIN( 592)			_hx_tmp->push(point);
            		}
HXLINE( 594)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxPath_obj,addPoint,return )

 ::flixel::path::FlxPath FlxPath_obj::addPointAt( ::flixel::math::FlxBasePoint node,int index,::hx::Null< bool >  __o_asReference){
            		bool asReference = __o_asReference.Default(false);
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_609_addPointAt)
HXLINE( 610)		if ((index < 0)) {
HXLINE( 611)			return ::hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 612)		if (asReference) {
HXLINE( 614)			this->nodes->insert(index,node);
            		}
            		else {
HXLINE( 618)			::Array< ::Dynamic> _hx_tmp = this->nodes;
HXDLIN( 618)			Float x = node->x;
HXDLIN( 618)			Float y = node->y;
HXDLIN( 618)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 618)			point->_inPool = false;
HXDLIN( 618)			_hx_tmp->insert(index,point);
            		}
HXLINE( 620)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxPath_obj,addPointAt,return )

 ::flixel::math::FlxBasePoint FlxPath_obj::remove( ::flixel::math::FlxBasePoint node){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_631_remove)
HXLINE( 632)		int index = this->nodes->indexOf(node,null());
HXLINE( 633)		if ((index >= 0)) {
HXLINE( 635)			return this->nodes->splice(index,1)->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >();
            		}
HXLINE( 637)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPath_obj,remove,return )

 ::flixel::math::FlxBasePoint FlxPath_obj::removeAt(int index){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_647_removeAt)
HXLINE( 648)		if ((this->nodes->length <= 0)) {
HXLINE( 650)			return null();
            		}
HXLINE( 652)		if ((index >= (this->nodes->length - 1))) {
HXLINE( 654)			this->nodes->pop().StaticCast<  ::flixel::math::FlxBasePoint >();
            		}
HXLINE( 656)		return this->nodes->splice(index,1)->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPath_obj,removeAt,return )

 ::flixel::math::FlxBasePoint FlxPath_obj::head(){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_665_head)
HXLINE( 666)		if ((this->nodes->length > 0)) {
HXLINE( 668)			return this->nodes->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >();
            		}
HXLINE( 670)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPath_obj,head,return )

 ::flixel::math::FlxBasePoint FlxPath_obj::tail(){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_679_tail)
HXLINE( 680)		if ((this->nodes->length > 0)) {
HXLINE( 682)			return this->nodes->__get((this->nodes->length - 1)).StaticCast<  ::flixel::math::FlxBasePoint >();
            		}
HXLINE( 684)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPath_obj,tail,return )

int FlxPath_obj::get_nodeIndex(){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_689_get_nodeIndex)
HXDLIN( 689)		return this->nextIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPath_obj,get_nodeIndex,return )

bool FlxPath_obj::set_immovable(bool value){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_693_set_immovable)
HXLINE( 694)		bool _hx_tmp;
HXDLIN( 694)		bool _hx_tmp1;
HXDLIN( 694)		if (!(this->_firstUpdate)) {
HXLINE( 694)			_hx_tmp1 = (this->nextIndex < 0);
            		}
            		else {
HXLINE( 694)			_hx_tmp1 = true;
            		}
HXDLIN( 694)		if (!(_hx_tmp1)) {
HXLINE( 694)			_hx_tmp = (value == this->immovable);
            		}
            		else {
HXLINE( 694)			_hx_tmp = true;
            		}
HXDLIN( 694)		if (_hx_tmp) {
HXLINE( 695)			return (this->immovable = value);
            		}
HXLINE( 697)		if (value) {
HXLINE( 699)			this->_wasObjectImmovable = this->get_object()->immovable;
HXLINE( 700)			this->get_object()->set_immovable(true);
            		}
            		else {
HXLINE( 702)			if (::hx::IsNotNull( this->_wasObjectImmovable )) {
HXLINE( 704)				this->get_object()->set_immovable(( (bool)(this->_wasObjectImmovable) ));
HXLINE( 705)				this->_wasObjectImmovable = null();
            			}
            		}
HXLINE( 708)		return (this->immovable = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPath_obj,set_immovable,return )

bool FlxPath_obj::set_autoCenter(bool value){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_714_set_autoCenter)
HXLINE( 715)		 ::flixel::path::FlxPathAnchorMode _hx_tmp;
HXDLIN( 715)		if (value) {
HXLINE( 715)			_hx_tmp = ::flixel::path::FlxPathAnchorMode_obj::CENTER_dyn();
            		}
            		else {
HXLINE( 715)			_hx_tmp = ::flixel::path::FlxPathAnchorMode_obj::TOP_LEFT_dyn();
            		}
HXDLIN( 715)		this->centerMode = _hx_tmp;
HXLINE( 716)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPath_obj,set_autoCenter,return )

bool FlxPath_obj::get_autoCenter(){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_723_get_autoCenter)
HXDLIN( 723)		if ((this->centerMode->_hx_getIndex() == 1)) {
HXDLIN( 723)			return true;
            		}
            		else {
HXDLIN( 723)			return false;
            		}
HXDLIN( 723)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPath_obj,get_autoCenter,return )

int FlxPath_obj::get__inc(){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_728_get__inc)
HXDLIN( 728)		if (this->direction) {
HXDLIN( 728)			return 1;
            		}
            		else {
HXDLIN( 728)			return -1;
            		}
HXDLIN( 728)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPath_obj,get__inc,return )

int FlxPath_obj::set__inc(int value){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_732_set__inc)
HXLINE( 733)		bool _hx_tmp;
HXDLIN( 733)		if ((value < 0)) {
HXLINE( 733)			_hx_tmp = false;
            		}
            		else {
HXLINE( 733)			_hx_tmp = true;
            		}
HXDLIN( 733)		this->direction = _hx_tmp;
HXLINE( 734)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPath_obj,set__inc,return )

int FlxPath_obj::get__mode(){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_738_get__mode)
HXLINE( 739)		bool isForward = (this->direction == true);
HXLINE( 740)		switch((int)(this->loopType)){
            			case (int)0: {
HXLINE( 743)				if (isForward) {
HXLINE( 743)					return 0;
            				}
            				else {
HXLINE( 743)					return 1;
            				}
            			}
            			break;
            			case (int)16: {
HXLINE( 745)				if (isForward) {
HXLINE( 745)					return 16;
            				}
            				else {
HXLINE( 745)					return 256;
            				}
            			}
            			break;
            			case (int)4096: {
HXLINE( 747)				return 4096;
            			}
            			break;
            		}
HXLINE( 740)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPath_obj,get__mode,return )

int FlxPath_obj::set__mode(int value){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_752_set__mode)
HXLINE( 753)		int _hx_tmp;
HXDLIN( 753)		switch((int)(value)){
            			case (int)0: case (int)1: {
HXLINE( 753)				_hx_tmp = 0;
            			}
            			break;
            			case (int)16: case (int)256: {
HXLINE( 753)				_hx_tmp = 16;
            			}
            			break;
            			case (int)4096: {
HXLINE( 753)				_hx_tmp = 4096;
            			}
            			break;
            		}
HXDLIN( 753)		this->loopType = _hx_tmp;
HXLINE( 763)		bool _hx_tmp1;
HXDLIN( 763)		switch((int)(value)){
            			case (int)0: case (int)16: {
HXLINE( 763)				_hx_tmp1 = true;
            			}
            			break;
            			case (int)1: case (int)256: {
HXLINE( 763)				_hx_tmp1 = false;
            			}
            			break;
            			case (int)4096: {
HXLINE( 763)				_hx_tmp1 = this->direction;
            			}
            			break;
            		}
HXDLIN( 763)		this->direction = _hx_tmp1;
HXLINE( 773)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPath_obj,set__mode,return )

 ::flixel::FlxObject FlxPath_obj::get_object(){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_778_get_object)
HXDLIN( 778)		return ( ( ::flixel::FlxObject)(this->target) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPath_obj,get_object,return )

 ::flixel::FlxObject FlxPath_obj::set_object( ::flixel::FlxObject value){
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_783_set_object)
HXDLIN( 783)		return (this->target = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPath_obj,set_object,return )

int FlxPath_obj::FORWARD;

int FlxPath_obj::BACKWARD;

int FlxPath_obj::LOOP_FORWARD;

int FlxPath_obj::LOOP_BACKWARD;

int FlxPath_obj::YOYO;

 ::flixel::math::FlxBasePoint FlxPath_obj::_point;


::hx::ObjectPtr< FlxPath_obj > FlxPath_obj::__new(::Array< ::Dynamic> nodes) {
	::hx::ObjectPtr< FlxPath_obj > __this = new FlxPath_obj();
	__this->__construct(nodes);
	return __this;
}

::hx::ObjectPtr< FlxPath_obj > FlxPath_obj::__alloc(::hx::Ctx *_hx_ctx,::Array< ::Dynamic> nodes) {
	FlxPath_obj *__this = (FlxPath_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxPath_obj), true, "flixel.path.FlxPath"));
	*(void **)__this = FlxPath_obj::_hx_vtable;
	__this->__construct(nodes);
	return __this;
}

FlxPath_obj::FlxPath_obj()
{
}

void FlxPath_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxPath);
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(immovable,"immovable");
	HX_MARK_MEMBER_NAME(angle,"angle");
	HX_MARK_MEMBER_NAME(centerMode,"centerMode");
	HX_MARK_MEMBER_NAME(autoRotate,"autoRotate");
	HX_MARK_MEMBER_NAME(angleOffset,"angleOffset");
	HX_MARK_MEMBER_NAME(onComplete,"onComplete");
	HX_MARK_MEMBER_NAME(axes,"axes");
	HX_MARK_MEMBER_NAME(_wasObjectImmovable,"_wasObjectImmovable");
	HX_MARK_MEMBER_NAME(_firstUpdate,"_firstUpdate");
	 ::flixel::path::FlxTypedBasePath_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxPath_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(immovable,"immovable");
	HX_VISIT_MEMBER_NAME(angle,"angle");
	HX_VISIT_MEMBER_NAME(centerMode,"centerMode");
	HX_VISIT_MEMBER_NAME(autoRotate,"autoRotate");
	HX_VISIT_MEMBER_NAME(angleOffset,"angleOffset");
	HX_VISIT_MEMBER_NAME(onComplete,"onComplete");
	HX_VISIT_MEMBER_NAME(axes,"axes");
	HX_VISIT_MEMBER_NAME(_wasObjectImmovable,"_wasObjectImmovable");
	HX_VISIT_MEMBER_NAME(_firstUpdate,"_firstUpdate");
	 ::flixel::path::FlxTypedBasePath_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxPath_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"axes") ) { return ::hx::Val( axes ); }
		if (HX_FIELD_EQ(inName,"_inc") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get__inc() ); }
		if (HX_FIELD_EQ(inName,"head") ) { return ::hx::Val( head_dyn() ); }
		if (HX_FIELD_EQ(inName,"tail") ) { return ::hx::Val( tail_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return ::hx::Val( speed ); }
		if (HX_FIELD_EQ(inName,"angle") ) { return ::hx::Val( angle ); }
		if (HX_FIELD_EQ(inName,"_mode") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get__mode() ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return ::hx::Val( reset_dyn() ); }
		if (HX_FIELD_EQ(inName,"start") ) { return ::hx::Val( start_dyn() ); }
		if (HX_FIELD_EQ(inName,"onEnd") ) { return ::hx::Val( onEnd_dyn() ); }
		if (HX_FIELD_EQ(inName,"addAt") ) { return ::hx::Val( addAt_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"object") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_object() ); }
		if (HX_FIELD_EQ(inName,"cancel") ) { return ::hx::Val( cancel_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return ::hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"restart") ) { return ::hx::Val( restart_dyn() ); }
		if (HX_FIELD_EQ(inName,"setNode") ) { return ::hx::Val( setNode_dyn() ); }
		if (HX_FIELD_EQ(inName,"advance") ) { return ::hx::Val( advance_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addPoint") ) { return ::hx::Val( addPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeAt") ) { return ::hx::Val( removeAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"get__inc") ) { return ::hx::Val( get__inc_dyn() ); }
		if (HX_FIELD_EQ(inName,"set__inc") ) { return ::hx::Val( set__inc_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"immovable") ) { return ::hx::Val( immovable ); }
		if (HX_FIELD_EQ(inName,"nodeIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_nodeIndex() ); }
		if (HX_FIELD_EQ(inName,"get__mode") ) { return ::hx::Val( get__mode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set__mode") ) { return ::hx::Val( set__mode_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"autoCenter") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_autoCenter() ); }
		if (HX_FIELD_EQ(inName,"centerMode") ) { return ::hx::Val( centerMode ); }
		if (HX_FIELD_EQ(inName,"autoRotate") ) { return ::hx::Val( autoRotate ); }
		if (HX_FIELD_EQ(inName,"onComplete") ) { return ::hx::Val( onComplete ); }
		if (HX_FIELD_EQ(inName,"addPointAt") ) { return ::hx::Val( addPointAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_object") ) { return ::hx::Val( get_object_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_object") ) { return ::hx::Val( set_object_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"angleOffset") ) { return ::hx::Val( angleOffset ); }
		if (HX_FIELD_EQ(inName,"advancePath") ) { return ::hx::Val( advancePath_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_firstUpdate") ) { return ::hx::Val( _firstUpdate ); }
		if (HX_FIELD_EQ(inName,"updateTarget") ) { return ::hx::Val( updateTarget_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setProperties") ) { return ::hx::Val( setProperties_dyn() ); }
		if (HX_FIELD_EQ(inName,"computeCenter") ) { return ::hx::Val( computeCenter_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_nodeIndex") ) { return ::hx::Val( get_nodeIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_immovable") ) { return ::hx::Val( set_immovable_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"isTargetAtNext") ) { return ::hx::Val( isTargetAtNext_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoCenter") ) { return ::hx::Val( set_autoCenter_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_autoCenter") ) { return ::hx::Val( get_autoCenter_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"calculateVelocity") ) { return ::hx::Val( calculateVelocity_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_wasObjectImmovable") ) { return ::hx::Val( _wasObjectImmovable ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxPath_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_point") ) { outValue = ( _point ); return true; }
	}
	return false;
}

::hx::Val FlxPath_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"axes") ) { axes=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_inc") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set__inc(inValue.Cast< int >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angle") ) { angle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mode") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set__mode(inValue.Cast< int >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"object") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_object(inValue.Cast<  ::flixel::FlxObject >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"immovable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_immovable(inValue.Cast< bool >()) );immovable=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"autoCenter") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_autoCenter(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"centerMode") ) { centerMode=inValue.Cast<  ::flixel::path::FlxPathAnchorMode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"autoRotate") ) { autoRotate=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onComplete") ) { onComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"angleOffset") ) { angleOffset=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_firstUpdate") ) { _firstUpdate=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_wasObjectImmovable") ) { _wasObjectImmovable=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxPath_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_point") ) { _point=ioValue.Cast<  ::flixel::math::FlxBasePoint >(); return true; }
	}
	return false;
}

void FlxPath_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("speed",87,97,69,81));
	outFields->push(HX_("immovable",0a,27,70,27));
	outFields->push(HX_("angle",d3,43,e2,22));
	outFields->push(HX_("autoCenter",a4,36,a6,71));
	outFields->push(HX_("centerMode",d8,33,65,3a));
	outFields->push(HX_("autoRotate",2a,57,eb,36));
	outFields->push(HX_("angleOffset",c6,6f,7b,71));
	outFields->push(HX_("nodeIndex",b0,79,4a,62));
	outFields->push(HX_("axes",25,19,79,40));
	outFields->push(HX_("_mode",42,ef,71,fb));
	outFields->push(HX_("_inc",df,51,1b,3f));
	outFields->push(HX_("_wasObjectImmovable",41,d9,92,98));
	outFields->push(HX_("_firstUpdate",5a,64,b1,d1));
	outFields->push(HX_("object",bf,7e,3f,15));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxPath_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(FlxPath_obj,speed),HX_("speed",87,97,69,81)},
	{::hx::fsBool,(int)offsetof(FlxPath_obj,immovable),HX_("immovable",0a,27,70,27)},
	{::hx::fsFloat,(int)offsetof(FlxPath_obj,angle),HX_("angle",d3,43,e2,22)},
	{::hx::fsObject /*  ::flixel::path::FlxPathAnchorMode */ ,(int)offsetof(FlxPath_obj,centerMode),HX_("centerMode",d8,33,65,3a)},
	{::hx::fsBool,(int)offsetof(FlxPath_obj,autoRotate),HX_("autoRotate",2a,57,eb,36)},
	{::hx::fsFloat,(int)offsetof(FlxPath_obj,angleOffset),HX_("angleOffset",c6,6f,7b,71)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxPath_obj,onComplete),HX_("onComplete",f8,d4,7e,5d)},
	{::hx::fsInt,(int)offsetof(FlxPath_obj,axes),HX_("axes",25,19,79,40)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxPath_obj,_wasObjectImmovable),HX_("_wasObjectImmovable",41,d9,92,98)},
	{::hx::fsBool,(int)offsetof(FlxPath_obj,_firstUpdate),HX_("_firstUpdate",5a,64,b1,d1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FlxPath_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &FlxPath_obj::FORWARD,HX_("FORWARD",a5,b5,9e,65)},
	{::hx::fsInt,(void *) &FlxPath_obj::BACKWARD,HX_("BACKWARD",e3,6b,9e,80)},
	{::hx::fsInt,(void *) &FlxPath_obj::LOOP_FORWARD,HX_("LOOP_FORWARD",8a,81,3a,2b)},
	{::hx::fsInt,(void *) &FlxPath_obj::LOOP_BACKWARD,HX_("LOOP_BACKWARD",5e,08,55,a3)},
	{::hx::fsInt,(void *) &FlxPath_obj::YOYO,HX_("YOYO",2c,3d,10,3b)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(void *) &FlxPath_obj::_point,HX_("_point",91,fb,76,c2)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxPath_obj_sMemberFields[] = {
	HX_("speed",87,97,69,81),
	HX_("immovable",0a,27,70,27),
	HX_("angle",d3,43,e2,22),
	HX_("centerMode",d8,33,65,3a),
	HX_("autoRotate",2a,57,eb,36),
	HX_("angleOffset",c6,6f,7b,71),
	HX_("onComplete",f8,d4,7e,5d),
	HX_("axes",25,19,79,40),
	HX_("_wasObjectImmovable",41,d9,92,98),
	HX_("_firstUpdate",5a,64,b1,d1),
	HX_("reset",cf,49,c8,e6),
	HX_("setProperties",35,3a,87,02),
	HX_("start",62,74,0b,84),
	HX_("restart",cf,c7,a5,6a),
	HX_("setNode",c4,4a,8e,0e),
	HX_("computeCenter",ac,54,51,70),
	HX_("isTargetAtNext",c1,14,1b,7a),
	HX_("updateTarget",3a,9a,b0,86),
	HX_("calculateVelocity",a3,29,67,06),
	HX_("advancePath",47,83,f2,a8),
	HX_("advance",82,08,0c,ef),
	HX_("cancel",7a,ed,33,b8),
	HX_("onEnd",fc,97,64,32),
	HX_("add",21,f2,49,00),
	HX_("addAt",74,b5,43,1c),
	HX_("addPoint",6f,da,ec,3f),
	HX_("addPointAt",42,cd,ab,b8),
	HX_("remove",44,9c,88,04),
	HX_("removeAt",57,6e,1b,ad),
	HX_("head",20,29,0b,45),
	HX_("tail",90,b6,f6,4c),
	HX_("get_nodeIndex",87,4d,ae,23),
	HX_("set_immovable",ed,dc,d9,2d),
	HX_("set_autoCenter",61,a7,bb,07),
	HX_("get_autoCenter",ed,be,9b,e7),
	HX_("get__inc",68,0d,d6,be),
	HX_("set__inc",dc,66,33,6d),
	HX_("get__mode",99,4b,1b,3f),
	HX_("set__mode",a5,37,6c,22),
	HX_("get_object",88,ee,c6,05),
	HX_("set_object",fc,8c,44,09),
	::String(null()) };

static void FlxPath_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxPath_obj::FORWARD,"FORWARD");
	HX_MARK_MEMBER_NAME(FlxPath_obj::BACKWARD,"BACKWARD");
	HX_MARK_MEMBER_NAME(FlxPath_obj::LOOP_FORWARD,"LOOP_FORWARD");
	HX_MARK_MEMBER_NAME(FlxPath_obj::LOOP_BACKWARD,"LOOP_BACKWARD");
	HX_MARK_MEMBER_NAME(FlxPath_obj::YOYO,"YOYO");
	HX_MARK_MEMBER_NAME(FlxPath_obj::_point,"_point");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxPath_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxPath_obj::FORWARD,"FORWARD");
	HX_VISIT_MEMBER_NAME(FlxPath_obj::BACKWARD,"BACKWARD");
	HX_VISIT_MEMBER_NAME(FlxPath_obj::LOOP_FORWARD,"LOOP_FORWARD");
	HX_VISIT_MEMBER_NAME(FlxPath_obj::LOOP_BACKWARD,"LOOP_BACKWARD");
	HX_VISIT_MEMBER_NAME(FlxPath_obj::YOYO,"YOYO");
	HX_VISIT_MEMBER_NAME(FlxPath_obj::_point,"_point");
};

#endif

::hx::Class FlxPath_obj::__mClass;

static ::String FlxPath_obj_sStaticFields[] = {
	HX_("FORWARD",a5,b5,9e,65),
	HX_("BACKWARD",e3,6b,9e,80),
	HX_("LOOP_FORWARD",8a,81,3a,2b),
	HX_("LOOP_BACKWARD",5e,08,55,a3),
	HX_("YOYO",2c,3d,10,3b),
	HX_("_point",91,fb,76,c2),
	::String(null())
};

void FlxPath_obj::__register()
{
	FlxPath_obj _hx_dummy;
	FlxPath_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.path.FlxPath",a0,34,81,d8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxPath_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxPath_obj::__SetStatic;
	__mClass->mMarkFunc = FlxPath_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxPath_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxPath_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxPath_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxPath_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxPath_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxPath_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxPath_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_121_boot)
HXDLIN( 121)		FORWARD = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_128_boot)
HXDLIN( 128)		BACKWARD = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_135_boot)
HXDLIN( 135)		LOOP_FORWARD = 16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_142_boot)
HXDLIN( 142)		LOOP_BACKWARD = 256;
            	}
{
            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_149_boot)
HXDLIN( 149)		YOYO = 4096;
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::flixel::math::FlxBasePoint _hx_run(){
            			HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_154_boot)
HXDLIN( 154)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 154)			point->_inPool = false;
HXDLIN( 154)			return point;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_128203ded77fa8c1_154_boot)
HXDLIN( 154)		_point = ( ( ::flixel::math::FlxBasePoint)( ::Dynamic(new _hx_Closure_0())()) );
            	}
}

} // end namespace flixel
} // end namespace path
